{"title":"Nerd Calistênico","description":"","language":"pt-br","link":"https://nerdcalistenico.github.io/hemersonvianna","pubDate":"Sat, 27 Feb 2021 18:20:00 GMT","lastBuildDate":"Fri, 04 Jun 2021 19:29:50 GMT","webMaster":"Hemerson Vianna","items":[{"title":"Projetos para 2021","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/personal/projetos-para-2021/","description":"Primeiro artigo de 2021, e iniciando as atividades desse blog neste ano.A última atividade nesse blog, foi referente aos 92 dias de código, onde apenas joguei os códigos diariamente. Eles Estão melhor organizados no Instagram e no Github. Para ajustar isso, nesse ano terá um bootcamp para ter um vídeo para cada dia, desses 92. Assim, os últimos artigos publicados nesse blog, serão atualizados.Nerd CalistênicoEsse é único projeto que já está no ar, mas sempre será atualizado e conta como um projeto em 2021.Se está lendo isso, provavelmente conhece esse projeto. O projeto conta com 9 blogs e iformações sobre mim. Pode ser resumindo a um site pessoal, mas é a origem para todos os projetos que já planejei e irei planejar.Cyan FrontCom o tempo quis colocar o meu perfil internacional, mas colocar o projeto Nerd Calistênico em vários idiomas ou pelo menos criar uma versão em inglês, seria um trabalho muito grande e talvez, sem necessidade.Com base nisso, a ideia é ter o Cyan Front para atingir esse objetivo. Terá uma estrutura mais simples e possivelmente um blog. Assim, poderei disponibilizar conteúdos para quem entende o idioma inglês.Coding BootcampsSenti a necessidade de ter uma área para bootcamps, que se encaixariam bem no objetivo de ter conteúdos diretos e rápidos.TogakureSempre tive o sonho e meta de criar um projeto que reunisse componentes que dessem suporte ao maior número de bibliotecas e frameworks possível. Pelo menos os mais utilizados no mercado.É um projeto ambicioso e que trará grandes problemas de manutenção. Como é um projeto de vida, não importa o tempo que irá levar.Votação 2022De uns anos para cá, fiquei mais ligado em política. Ao buscar algum meio de me colocar por dentro desse assunto, criei o rio2020.com.br, que já tirei do ar, pois atingiu o seu objetivo.Foram mais de 20.000 visitas e no site, mostrava todos os candidatos a câmara de vereadores do município do Rio de Janeiro, e também incluia os cadidatos a prefeitura da cidade.Então, descobri que dá para fazer algo relacionado a política. Com isso em mente, o votacao2022.com.br existirá para ser mais um canal para trazer informações sobre as eleições no Brasil, em 2022.Zero to DeployTendo uma área para os bootcamps, já é algo interessante, mas ainda faltava um curso oficial. O zero to deploy, será alo óbvio pelo nome do curso. Então, tentarei toda a minha experiência que tenho desde o brainstorming de um projeto, até o deploy em produção. Passando por todas as áreas como: negócio, gestão de projeto, ux/ui, front-end, back-end e devOps.ConclusãoNo site Hemerson Vianna, pode ser visto todos os links para os projetos. Desde o site de cada um, como os endereços nas redes sociais.","pubDate":"Sat, 27 Feb 2021 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/personal/projetos-para-2021/","category":"personal"},{"title":"O ano dos desafios","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/personal/o-ano-dos-desafios/","description":"Esse é o segundo artigo de teor pessoal que pode ser encontrado nesse blog. O primeiro artigo é o O ano que mudou a minha vida, que foi escrito em 01.07.2016.Para dar uma continuidade para quem leu, no dia 19.07.2016, estava iniciando na empresa B2W Digital. Quando escrevi o artigo, ainda não tinha previsões de quando voltaria para um emprego de carteira assinada.O artigo tinha como foco, ser motivador e sincero. Não foi uma escolha tirar um tempo para mim. Basicamente, fui jogado em uma situação onde estava sem emprego, muito estresse e com traumas. Boa parte do esforço que tive no ano descrito, foi para me recuperar e tenho consciência de que alguns traumas se arrastam até hoje.Em julho de 2016, estava com as forças renovadas e tinha conseguido superar muitas coisas.Equipes e códigosDo dia 19.07.2016 até 15.03.2019, pude trabalhar com boas equipes e evoluir bastante no meio da programação. Tive mais experiência com o node.js no back-end, react no front-end e até experiência como líder de equipe.Também tive experiência como líder em 2014/2015, mas não oficialmente. O cenário era: Ser o único responsável de front-end, ter a contribuição de 7 estagiários (seo, campanhas, ux, ui e comercial) e ter mais uma pessoa de back-end, para uma loja online de seguros e previdência. Então, sentava com todos, para definir padrões e estratégias. Por mais que a ideia era passar conhecimento, também obtive bastante. O lado ruim, foi acabar me sobrecarregando e somou com o que descrevi no outro artigo.Trabalhei com muitas pessoas no período de 3 anos e também tive a oportunidade de fazer o meu primeiro projeto que foi para produção, com react-native. Junto com o meu líder de equipe na época, fizemos a área de produto para as lojas Americanas, Submarino, Shoptime e Sou barato.Como líder, tive a oportunidade dada pelo meu gerente na época, de liderar 2 projetos internos. Um era utilizado pelo pessoal de marketing, para gerenciar as peças que são mostradas nos sites do grupo e outro, era para criação de campanhas. O primeiro já existia, o segundo foi criado do zero. Atuei fazendo toda a parte do front-end, também mexendo na parte de back-end com os outros desenvolvedores e como líder. Éramos em 3 pessoas.Participei de algumas equipes e projetos. Destaco o Allan Carvalho e o Luiz Felipe, que foram respectivamente líder e gerente da minha pessoa, por um tempo. Obrigado pelas oportunidades e pelo profissionalismo. Nem vou enumerar as pessoas desenvolvedoras, pois, posso esquecer alguém.Tudo deu certo. Esses projetos como vários outros, estão em produção até hoje.DilemasCom a evolução, vem alguns dilemas. Como desenvolvedor já fiz vários projetos do zero e considero ter sorte por isso. Já perdi as contas de quantos projetos de componentes e projetos completos, já fiz do zero.De 2016 a 2019, teve uma grande quantidade de desenvolvedores que passaram pela minha vida. Muitos trabalharam comigo ou conhecia, por ser da mesma empresa. Começou a ficar esquisito o tamanho da rotatividade e isso trazia alguns dilemas.Todo mundo indo para fora, deveria ir também?Deixei de ser líder, pois não tinha poder de decisão e voltei para pleno, tenho que sair para virar sênior?A motivação está indo embora ou é apenas um desgaste temporário?Todos estão evoluindo, será que estou também?Só uma observação, não ligo e nunca liguei para cargos. Já fui pleno, depois sênior, depois pleno e etc.. Isso depende muito da empresa. Só ligo para a questão financeira, que não pode diminuir. Então, quando cito pleno e sênior é mais por uma questão de reconhecimento. Pois acabou que isso me confundiu, ao saber realmente em que posição estou.Parece bobo, mas hoje vejo que isso realmente me confundiu e me trouxe para um dilema que acredito que muitos vivem no Brasil.Por experiência, é muito tenso ficar perdido entre pleno, sênior e líder. Por mais que isso dependa da empresa onde está, nos questionamos no contexto geral. Isso deveria ser mais nivelado entre as empresas. Assim, fica a questão de custo e benefício. Uma coisa é como se considera, outra é o que a empresa espera/precisa. Sendo o fator financeiro, as vezes primordial para as devidas escolhas.Então, temos uma mistura de situações na área. O mais importante é se sentir confortável na posição que está, pois se não estiver, o caldo entorna muito rápido.E nunca, nunca, nunca pense que será mais tranquilo estar em um cargo abaixo. O seu subconsciente não irá permitir que você dê menos que o seu melhor. Se trata mais de uma questão moral, em que você não conseguirá ficar bem consigo mesmo.PlanejamentoSe eu falar que planejei em detalhes ou com antecedência os momentos que tirei para mim, estarei mentindo com a cara lavada.No ano que mudou a minha vida, não tinha para onde correr, tive que planejar rápido e só tinha a opção de me recuperar e colocar metas.Agora, para esse ano dos desafios, os dilemas já estavam martelando e infelizmente, minha experiência como profissional estava frequentemente sendo desprezada. Nunca fui orgulhoso profissionalmente, talvez isso seja até um erro. Sempre me coloco abaixo da minha capacidade.Também não sou impulsivo profissionalmente, sei exatamente quando começou e quando terminou a insatisfação profissional, sendo um processo de 1 ano. Então, não foi uma situação de um dia, onde um superior diz: “- Sei que tem anos de experiência, mas só faça o que estou mandando. O que importa e a meta, não a qualidade.”E chega aquele momento que você se pergunta: “- O que estou fazendo da minha vida? Passei anos virando noites, dando o meu melhor e para quê?”Assim, se deu a decisão de tirar um ano para os desafios. Nada planejado, mas sabia que as coisas não poderiam continuar como estavam.Particularmente, consigo planejar muito rápido. Vou me lembrar para sempre, que no final de 2018, tive 10 dias de folga. O meu líder me informou no trabalho e planejei, comprei todos os voos e hospedagens em 2 horas, para 10 dias em 4 estados no nordeste. Deu tudo certo, nenhum furo e foi incrível.Mãos à obraAgora tinha que começar de fato um ano para mim. A primeira escolha foi dedicação à esse site, mudando a estrutura e adicionando mais coisas. O resultado foi muito bom. O número de visitantes aumentou em 10 vezes e agora em 2020, o número está 200% maior. Isso foi e está sendo muito motivador.Com esse período, tinha como objetivo um tempo para o Hemerson, investi no lado pessoal e em relacionamento. Por mais que consiga manter a vida profissional e relacionamentos, nem sempre dá para conhecer pessoas novas, pois acabamos entrando na rotina de trabalho e menos tempo livre.Os primeiros 6 meses se resumem nisso. Depois veio a ideia dos desafios, já que os meus projetos com o site e github, já estavam encaminhados. Em outubro de 2019, começaram os desafios de calistenia e de códigos que podem ser vistos no decorrer deste artigo.Algo surreal e acredito que nunca mais terei tempo para essa correria insana. Foram 92 dias, que tive uma disciplina extrema. Já seria difícil ser apenas 1 desafio, mas 2, foi loucura. Fora outras coisas que fiz nesse período. Então, até a virada do ano, foi uma correria bem grande.Abaixo, consigo mostrar como foram esses 92 dias e depois para finalizar esse ano, relaxei no nordeste.CalisteniaDesafio de calistenia, totalizando 90 dias. A intenção era manter a disciplina de treinar todo dia..images{display:flex;flex-direction:row;flex-flow:row wrap}.images .loader{display:block;height:80px;width:80px}.images a{display:block;position:relative;height:80px;width:80px}.images a:hover:after{box-shadow:inset 0 0 10px;content:\"\";display:block;position:absolute;width:100%;height:100%;top:0;left:0}CódigosDesafio de códigos, totalizando 92 dias. #92daysofcode. A intenção era mostrar uma transição do básico para o avançado. Registrado no Instagram e no Github. Atualmente, transformando esses dias em artigos e atualizando esse blog.Monólogo na caminhadaAproveitei, para fazer monólogos rápidos durante a caminhada, que ficava mais dificil de raciocinar. Foi um desafio interessante.Sonus et RhythmusConsegui registrar as minhas playlists e ter mais conteúdo.IHMO MoviesNão poderia deixar de fora a minha paixão pelo mundo cinematográfico. Além de registrar no meu Instagram, consegui gerar conteúdo semanalmente para o Youtube. Os vídeos podem ser vistos aqui.Jornada RelevanteÉ preciso ter um bom momento para relaxar e conhecer novos lugares. Para encerrar esse ano de desafios, tinha que ter essa viagem, para fechar com chave de ouro.Considerações finaisForam 9 dias no nordeste, dessa vez só no Recife, mas consegui dar um pulo em Alagoas, para conhecer Maragogi. No dia 22 de janeiro de 2020, tendo voltado de viagem no dia anterior, estava me encontrando no final do ano dos desafios.A grana já estava no fim, afinal, uma hora ela acaba. O planejamento foi para 1 ano e uma hora chegamos na reta final.Então, fiquei reservado em casa para não ter mais custos e esperar a volta para o mercado de trabalho. Fui tocando algumas coisas e analisando vagas. Fui deixando para março, pois a ideia era completar 1 ano. Na minha cabeça, não teria mais oportunidade ou não queria mais fazer isso novamente.Por mais que você tire um tempo para você, coloque planos e objetivos, sempre se trabalha com a incerteza, pois aqui, ninguém tem renda infinita ou alguém para bancar. Podemos dizer também, que nem sempre o melhor para você, também fará bem para a sua imagem profissional.As pessoas desenvolvedoras tem uma visão, as empresas tem uma visão e as pessoas de RH tem uma visão.Como desenvolvedor e criador de conteúdo, estou sempre evoluindo, mas ainda temos visões engessadas na área de tecnologia. Um tempo para você, pode somar para uns, mas pode ser motivo de desconfiança para outros.Então, as incertezas são muito grandes. Gosto de ser modesto, mas se me falarem que tenho coragem, pode ser que eu concorde. Afinal, não consigo dizer claramente de onde vem essa determinação. As vezes penso nisso e uma resposta seria que não tenho medo de trabalhar.Já fiz muitas coisas nessa vida. Não tenho receio de trabalhar como jardineiro, pedreiro e mais. Talvez, seja isso, o baixo custo de vida e não ter dependentes que possibilitam a minha “coragem“.ConclusãoNo dia 01 de abril de 2020, estava começando em uma nova empresa e assim se encerrou o ano de desafios. A história após esse dia, continua em um próximo artigo pessoal.Com esses 2 artigos, temos um resumo dos meus últimos 5 anos.Se chegou até aqui, espero que essa história real te acrescente em algo. É interessante escrever sem saber como será o dia de amanhã e se nossos objetivos serão alcançados. Foi muito bom rever o artigo que escrevi há 4 anos e estar escrevendo um novo artigo pessoal, hoje.Dei um pequeno azar em ficar 92 dias em uma correria insana, depois mais 54 dias em uma quarentena voluntária para poupar dinheiro e desde o dia 15.03.2020, em quarentena por causa da covid-19. Para tirar um tempo para você, é preciso ter coragem. Não sabemos o dia de amanhã e as coincidências podem ser bizarras.Espero que se tenha mais um artigo com a continuação dessa história. Até a próxima.","pubDate":"Thu, 09 Jul 2020 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/personal/o-ano-dos-desafios/","category":"personal"},{"title":"Começando com Vue","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/vue/comecando-com-vue/","description":"Quando se trata de front-end, temos muitas bibliotecas e frameworks no mercado. Temos 3 frameworks/bobliotecas(React, Angular e Vue), cuja a comunidade vem crescendo e se fortalecendo nos últimos anos. Dos 3, tive menos contato com o VueJS, que é o tema desse artigo.Por traz da criação do framework, temos Evan You, que iniciou o projeto quando estava trabalhando na empresa Google, em 2013. Acredito que a primeira coisa que vem à sua cabeça, é o AngularJS. Pois bem, ele usou bastante o AngularJS e estava entre os engenheiros da Google, na época do AngularJS 1.x.Em seu antigo blog, ele escreveu um artigo com uma reintrodução ao VueJS, em 2015. Nesse artigo, ele buscava explicar os motivos para ser usar e estudar mais sobre o VueJS, sendo que nessa época, já haviam várias opções de bibliotecas e frameworks. Ele também postou o artigo no medium.Agora vamos voltar um pouquinho e seguir a cronologia.ReleasesO VueJS foi lançado em fevereiro de 2014, com o release Animatrix. A versão v2.6.0, foi lançada em fevereiro deste ano e no momento temos a versão v2.6.10, que foi lançada em 20 de março. Particularmente, gosto muito da consistência dos releases do VueJS.Irei até pesquisar sobre o intervalo que teve em 2018, mas já olhando o repositório, a preocupação foi apenas com as versões de correção(PATCH) do v2.5.0. Por alto e sem muito conhecimento da rotina de manutenção do framework, me parece bem sólido o lançamento das versões com novas funcionalidades(MINOR).Basicamente, se tem o processo de lançamento, foco nas correções e logo após o estudo com as versões beta para um próximo release. (Processo bem óbvio, mas é bonito de se ver)Acho bem interessante a trajetória do framework, em relação a questão de releases e ver que a versão 2.x.x (MAJOR), está sendo sustentada desde 2016. Traz uma segurança. :)Até o momento, temos os seguintes releases:08/12/2013 - v0.6.0: VueJS08/12/2013 - v0.7.008/12/2013 - v0.8.025/02/2014 - v.0.9.0: Animatrix Lançamento do VueJS23/03/2014 - v0.10.0: Blade Runner07/11/2014 - v0.11.0: Cowboy Bebop12/06/2015 - v0.12.0: Dragon Ball25/10/2015 - v1.0.0: Evangelion30/09/2016 - v2.0.0: Ghost in the Shell22/11/2016 - v2.1.0: Hunter X Hunter26/02/2017 - v2.2.0: Initial D27/04/2017 - v2.3.0: JoJo’s Bizarre Adventure13/07/2017 - v2.4.0: Kill la Kill13/10/2017 - v2.5.0: Level E04/02/2019 - v2.6.0: MacrossNo blog atual do Evan You, temos o destaque para as versões:Vue 2.0 is Here!Vue 2.5 releasedVue 2.6 releasedSobre o frameworko Vue deperta o meu interesse devido a alguns pontos que já estou acostumado com o React:utiliza a abordagem de DOM virtual.provê componentes visuais reativos e combináveis.mantêm o foco na biblioteca principal, com preocupações como roteamento e gerenciamento de estado global tratadas por bibliotecas companheiras.entre outras vantagens que podem ser vistas nesse comparativoMais algumas vantagensSimplicidadeA idéia básica por trás do desenvolvimento com Vue é obter bons resultados com o mínimo de esforço possível. Ter o armazenamento de todos os códigos de um componente, como HTML, CSS e JavaScript, em um único arquivo.IntegraçãoOs desenvolvedores podem integrar o Vue a outras estruturas, como o React, permitindo que eles personalizem o projeto de acordo com seus respectivos requisitos.Fácil aprendizadoDe acordo com vários especialistas, o Vue não requer uma grande curva de aprendizado, o que é benéfico para novos desenvolvedores. Requer apenas que os desenvolvedores conheçam os fundamentos de JavaScript, HTML e CSS, que é diferente de outras bibliotecas/frameworks, onde linguagens de programação adicionais são necessárias para codificação avançada.DocumentaçãoDocumentação extensa e detalhada que torna rápido e fácil de aprender. Ele permite que um desenvolvedor inexperiente, com apenas um conhecimento básico de HTML e JavaScript, desenvolva um aplicativo.FlexibilidadeO framework Vue não é opinativo, você pode projetar a estrutura do aplicativo do jeito que você quer que seja.Suporte ao TypeScriptO Vue tem um suporte nativo para o TypeScript.Vue CLI 3Interface gráfica, suporte a plug-ins, prototipagem instantânea e uma configuração muito fácil do Webpack.Devtools no navegadorPermitindo que os desenvolvedores verifiquem o estado atual do Vuex, componentes, views, alterem manualmente dados específicos ou até mesmo analisem mais profundamente os eventos.Algumas desvantagensFalta de suporte para grandes projetosA equipe de desenvolvimento do Vue é pequena, o que significa que o framework precisará de algum tempo para obter suporte corporativo. Desde de 2018, o desenvolvimento do framework não está atrelado ao interesse das empresas. Sendo assim, mudanças na estrutura existente dependem principalmente do feedback dos membros da comunidade.Falta de PluginsO Vue ainda não tem o amplo apoio de seus colegas frameworks, já que não é tão popular quanto React ou Angular. Existem muito mais recursos para o React do que o Vue.Muita flexibilidade pode ser problemáticaÀs vezes, a flexibilidade pode causar alguns problemas para os desenvolvedores. Mas a variedade de opções do Vue pode se tornar um fardo quando implementada em projetos maiores que envolvem muitos desenvolvedores.O pensamento final é que o VueJS tem poucas desvantagens em comparação com outros frameworks. Como tem que ser, a questão é fazer uma análise completa do que a tecnologia pode oferecer e o que o seu projeto precisa.Aplicações MóveisSe fosse para o React, a resposta seria rápida. Para o Vue, se tem 2 opções:Native Script - NativeScript é um framework open source para construção de aplicativos móveis nativos usando JavaScript. Também é possivel saber mais com essa documentação do NativeScript-Vue.Weex - é um projeto criado pelo gigante chinês do comércio eletrônico, Alibaba. Com ele é possível produzir aplicações para web (html5), Android e iOS a partir da mesma base de código.FerramentasCLITemos o CLI (command line interface) do VueJS, para criar a estrutura básica com o framework.123npm install -g @vue/cli# ouyarn global add @vue/cliTem a documentação completa que você pode conferir. Também pode ter acesso à organização com os templates.LoaderCom o Vue Loader, você pode criar componentes do Vue, no formato SFC (Vue Single-File Component). Que seria um arquivo *.vue, que usa a sintaxe semelhante ao do HTML para descrever um componente do Vue. Cada arquivo é composto por três tipos de blocos de linguagem: &lt;template&gt;, &lt;script&gt; e &lt;style&gt;, e blocos personalizados opcionalmente adicionais. Exemplo:1234567891011121314151617181920212223&lt;template&gt; &lt;div class=\"example\"&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; msg: 'Hello world!' &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;.example &#123; color: red;&#125;&lt;/style&gt;&lt;custom1&gt; This could be e.g. documentation for the component.&lt;/custom1&gt;Confere a documentação completa para saber mais.DevtoolsEstou muito acostumando a debugar em alguns navegadores com React, mas com o Vue também é possível. Dá uma olhada no projeto.Bibliotecas oficiaisVue routerPara a questão de roteamento com o Vue, você precisa do Vue Router. Ele se integra ao núcleo do Vue para facilitar a criação de uma SPA e tem as seguintes características:Mapeamento de rota/visualização aninhadaConfiguração de roteador modular baseada em componenteParâmetros de rota, de consulta, wildcard (curinga, ex: “*”)Efeitos de transição de views ativados pelo sistema de transição do VueControle de navegação refinadoLinks com classes CSS ativas automáticasModo de histórico HTML5 ou modo hash, com fallback automático no IE9Comportamento de rolagem personalizávelVeja mais na documentação oficial.VuexO Vue tem essa biblioteca, que tamém é um padrão de gerenciamento de estado para as aplicações com o framework. Ele centraliza o armazenamento de todos os componentes de uma aplicação, contendo regras com o intuito de garantir que o estado só possa ser modificado de maneira previsível.Essa biblioteca merece um artigo só sobre o assunto, mas por enquanto pode dar uma olhada na documentação oficial.Vue Server RendererFaz um bom tempo que o desenvolvedor front-end, tem se preocupado não apenas com o lado do cliente. A preocupação com SEO, performance, consumo de CPU e outros assuntos que o lado do servidor resolve melhor, tem sido os motivos para o NodeJS, ser a plataforma da esperança.Renderizar pelo lado do servidor, cada vez mais se mostra uma coisa primordial no desenvolvimento front-end. Assim, nos dias de hoje, temos um aumento na designação de desemvolvedor full-stack. Pra quem é da época do Web designer e Web master, como eu, não liga muito para rótulos.O fato é que as camadas no desenvolvimento de uma aplicaçao tem ficado cada vez mais próximas na questão da mão de obra. A documentação oficial dessa biblioteca está disponível para você saber mais sobre usar o Vue, no lado do servidor.Considerações finaisDepois de muitas estratégias de estudo, agora busco ter alguns padrões para estudar sobre alguma tecnologia. Com a combinação de artigos e repositórios no github, tento consolidar o conhecimento.No caso do VueJS, tenho o repositório Knowledge VueJS, onde guardo os links de artigos, videos e projetos sobre o assunto. Também tem o repositório Prime VueJS, onde testo uma estrutura SPA básica com o framework.Nessa estratégia de conhecimento sobre o framework, falta mais um repositório utilizando mais recursos SPA (Single Page Application) e SSR (Server Side Rendering). Quando o mesmo estiver pronto, atualizo esse artigo.Nos próximos artigos sobre Vue, vamos conhecer mais sobre o framework e levantar mais questões para a sua utilização e comparativo com outros frameworks/bibliotecas do mercado. Enquanto isso, você pode conferir a documentação oficial.","pubDate":"Wed, 14 Aug 2019 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/vue/comecando-com-vue/","category":"vue"},{"title":"UI Grid - Sistemas e bibliotecas","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/front-end/ui-grid-sistemas-e-bibliotecas/","description":"Nos últimos 8 anos, os sistemas de grid CSS vem ganhando destaque pela atenção que o layout responsivo tem recebido. E estou estimando esse tempo, com base na data de lançamento do twitter boostrap (19 de agosto de 2011). Essa seria a minha referência, em relação ao início forte de discussões sobre boas práticas para layout responsivo, frameworks e bibliotecas para esse fim.Sistema de gridO sistema de grid é uma estrutura que permite o alinhamento de elementos da página com base em colunas e linhas sequenciadas.O formato com 12 colunas tem sido o mais utilizado, por causa da flexibilidade proporcionada e por ser capaz de dividir o layout uniformemente. Na divisão por 2, 3 e 4, temos uma serie de modulações disponíveis (2x6 , 3x4) e várias outras combinações.O número de colunas pode variar dependendo do projeto. Quanto maior o número de colunas, (por exemplo, 16 ou 24) maior a quantidade de possibilidades para divisão.960 Grid System, considerado o rei do grid por muitos anos, tem a seguinte estrutura:Largura total de 960px.12 colunasLargura de 60px em cada coluna.Cada coluna tem 10px de margem esquerda e direita. Sendo 20px de espaço entre as colunas.A área total do conteúdo é de 940px.16 colunaslargura de 40px em cada coluna.Cada coluna tem 10px de margem esquerda e direita. Sendo 20px de espaço entre as colunas.A área total do conteúdo é de 940px.24 colunaslargura de 30px em cada coluna.Cada coluna tem 5px de margem esquerda e direita. Sendo 10px de espaço entre as colunas.A área total do conteúdo é de 950px.Uma das principais razões para a popularidade do 960 Grid com os designers é a sua flexibilidade. Os designers podem usar uma ampla gama de colunas, com o número máximo de 24.Funcionou muito bem no começo e ainda funciona até hoje, porque a maioria dos projetos tem o tamanho de fonte definido em 12px. De uns anos para cá, que a maioria dos layouts estão sendo definidos com tamanho de fonte de 13px ou superior.Como o tamanho da fonte aumentou, é necessário aumentar a área de conteúdo e ajustar o espaço entre as colunas. Com a evolução das boas práticas na experiência do usuário e uma variedade de novos dispositivos, o sistema de grid foi ganhando uma infinidade de variações. Ex: O Bootstrap, acima de 960px, usa a largura de 1140px para área de conteúdo no tamanho wide.Sendo encontrado com facilidade na internet, os sistemas mais comuns. Lembrando que o projeto terá uma necessidade e o sistema poderá ser livremente customizado.Levando o layout CSS ao próximo nívelQuem já trabalha com layout CSS, há muitos anos, já deve ter visto muito float: *, display: table, display: inline-block, para montar uma grade na estrutura ou em um simples menu. Desde 2015, o suporte dos navegadores mais relevantes para o Flexbox, tem sido excelente. O CSS Grid, tem sido bem recebido pelo navegadores, desde 2017. É claro que não considero o IE, para falar de suporte as novas tecnologias, mas o suporte a esse layout que tem feito muitos desenvolvedores felizes, já passa de 90%. Agora, vamos falar mais sobre essa flexibilidade que temos no CSS.O Flexbox, foi projetado como um modelo de layout unidimensional e método que pode oferecer distribuição de espaço entre itens numa interface e capacidade de alinhamento. Ele também pode ser usado para trabalhar elementos de forma bidimensional, mas o flexbox opera melhor quando trabalhado com os itens em apenas uma dimensão, ou seja, em coluna ou linha.Já o CSS Grid, tem o modelo bidimensional, que controla ao mesmo tempo as colunas e linhas. Você pode indicar o ponto em que um elemento começa e acaba dentro da sua grid, o que proporciona muita flexibilidade.CSS Grid é principalmente definido no elemento pai. No flexbox, fora o básico, a maior parte do layout é aplicado nos elementos filhos.O intuito do artigo, não é me aprofundar muito em cada assunto sobre como montar a sua grade, e sim, apenas apresentar os sistemas e ferramentas para o mesmo. O mais importante é deixar claro que um não substitui o outro. Podem ser usado tranquilamente juntos e em próximo artigos, darei mais exemplos dessa combinação.Abaixo podemos brincar, conhecer e praticar com Flexbox e CSS Grid.Flexbox FroggyCSS Grid GardenBibliotecasFiz um compilado das ferramentas que podem nos ajudar e inspirar no desenvolvimento e montagem da grade para os nossos projetos.Pré-processadores e CSSFlexboxFlexbox Grid - http://flexboxgrid.com/Bootstrap Grid - https://getbootstrap.com/docs/4.0/layout/grid/Bulma - https://bulma.io/Waffle Grid - https://lucasgruwez.github.io/waffle-gridBasscss - https://basscss.com/Pure - https://purecss.io/grids/Milligram - https://milligram.io/grids.htmlGRD - https://github.com/1000ch/grdGridlex - https://github.com/devlint/gridlexGridly - https://github.com/IonicaBizau/gridlyBlueprint CSS - https://blueprintcss.dev/Structure - https://github.com/kenwheeler/structurePicnic CSS - https://github.com/franciscop/picnicCSS GridCSS grid 12 column layout - https://github.com/erikmonjas/css-grid-12-column-layoutGriddy.css - https://github.com/balapa/griddy.cssOutros sistemasSemantic UI - https://semantic-ui.com/collections/grid.htmlcsswizardry-grids - https://github.com/csswizardry/csswizardry-gridsJeet Grid - https://github.com/mojotech/jeetLost Grid - https://github.com/peterramsing/lostToast - https://github.com/daneden/ToastNeat - https://github.com/thoughtbot/neatMsdotcom/WinJS Grid Framework - https://github.com/winjs/grid/Skeleton - https://github.com/dhg/SkeletonCrow - https://github.com/kkortes/crowSimple Grid - https://github.com/zachacole/Simple-GridPills - http://arkpod.in/pills/Spacegrid - https://github.com/JonathanSpeek/spacegridAngular, React e VueAngular UI Grid - http://ui-grid.info/React Material-UI Grid - https://material-ui.com/components/grid/React Grid Layout - https://github.com/STRML/react-grid-layoutRebass Grid - https://rebassjs.org/grid/JavaScriptMuuri - https://github.com/haltu/muuriMasonry - https://github.com/desandro/masonryDesign/UX/UIKK UI Store’s - Grid System Library - https://grid.kkuistore.com/BônusComo bônus, deixo uma biblioteca que posibilita a utilização de 3 sistemas de grid (flexbox, CSS Grid e Flexbox Masonry Grid. Escrito em SCSS e disponível em SCSS e CSS.CSS Grid LibraryConsiderações finaisMontar uma grade no projeto sempre gerou dúvidas entre leigos, designers e desenvolvedores front-end. Citei o 960 GS, por ser um exemplo de que esse assunto precisou de um norte para quem não tinha muita experiência ou estipular um padrão.A única coisa certa, é que temos uma evolução e maior suporte em relação ao assunto de layout CSS na última década. Vale o estudo na parte de elaboração do projeto, quanto ao melhor sistema que deixará o desenvolvimento do mesmo mais flexivel e de acordo com a área de interface e desenvolvimento.Na minha opinião, antes de qualquer coisa relacionada ao desenvolvimento web, é necessário definir quais são os navegadores que o seu projeto dará suporte. Assim, diminuindo as preocupações na fase de desenvolvimento e é claro, quando o produto estiver em produção.","pubDate":"Mon, 22 Jul 2019 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/front-end/ui-grid-sistemas-e-bibliotecas/","category":"front-end"},{"title":"React - Hooks","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/react-hooks/","description":"A versão 16.8.0, é o primeiro release que traz suporte estável aos Hooks. Com isso, simplificando a vida de programadores e curiosos. Permitindo o uso de estado e outros recursos da biblioteca sem escrever uma classe.Regras dos HooksApenas chame os Hooks no nível mais alto. Não chame Hooks dentro de loops, condicionais ou funções aninhadas. O React identifica os hooks de um componente pela ordem em que eles foram chamados.Apenas chame os Hooks em componentes funcionais. Não chame Hooks em funções JavaScript comuns. (Há apenas um outro lugar válido para se chamar Hooks — dentro dos seus próprios Hooks customizados.)Confira o link para o plugin do eslint, para que as regras sejam revisadas automaticamente.Tipos de HooksHook de estados - useState - permite ler e armazenas as informações de maneira mais fácil e prática no estado, eliminando alguns componentes de classes e substituindo por componentes funcionais.Hook de efeitos - useEffect - utilizado para executar funções que necessitam ou realizam algum efeito no componente. Ex: mutations, subscriptions, timers e logging. Tem o mesmo efeito que os componentDidMount e componentDidUpdate tem nas classes.Hook customizado - Crie seus próprios hooks e extraia a lógica de um componente em funções reutilizáveis.Outros Hooks - Hooks nativos com funções específicas.Os Hooks existentes podem ser classificados como básicos e adicionais. Veja a lista abaixo:Hooks básicos:useStateuseEffectuseContextHooks adicionais:useReduceruseCallbackuseMemouseRefuseImperativeMethodsuseMutationEffectuseLayoutEffectHook de estadosVamos olhar o hook de estado. Abaixo veremos um exemplo:123456789101112import React, &#123; useState &#125; from 'react' function Counter() &#123; const [count, setCount] = useState(0) return ( &lt;div&gt; Você clicou &#123;count&#125; vezes! &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; );&#125;;O hook nesse caso é o useState. Ele está recebendo um estado inicial e retorna um array com dois valores. Sendo o primeiro valor o estado atual e o segundo uma função para atualizar esse estado. O useState não tem a funcionalidade idêntica ao setState que é utilizado em classes. Quando se é passado um objeto para o setState, o mesmo combina o valor que estamos passando com o antigo. Já no useState, todo o estado do hook será alterado, mas temos o mesmo efeito usando o operador de spread. Ex: useState({ …oldState, …newState }); .Exemplo de um objeto no estado inicial:12345function Counter() &#123; const [state, setState] = useState(&#123; nome: '', idade: 0 &#125;) ... )&#125;Também, podemos chamar mais de uma vez o nosso hook useState no nosso componente.123456function Counter() &#123; const [name, setName] = useState('') const [age, setAge] = useState(0) ... )&#125;Hook de efeitosAgora vamos falar do hook useEffect. O mesmo permite que seu componente em forma de função tenha acesso aos métodos de ciclo de vida sem precisar refatorar seu componente para uma classe. Abaixo, um exemplo:123456789101112131415import React, &#123; useState, useEffect &#125; from 'react' function Counter() &#123; const [count, setCount] = useState(0) useEffect(() =&gt; &#123; window.document.title = `Você clicou $&#123;count&#125; vezes!` &#125;) return ( &lt;div&gt; Você clicou &#123;count&#125; vezes! &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;+1&lt;/button&gt; &lt;/div&gt;)&#125;O título será alterado de acordo com a atualização do estado do componente. O useEffect nesse contexto, seria o mesmo que o ComponentDidMount e também o ComponentDidUpdate. Será chamada a função passada tanto quando o componente é montado quando é atualizado.O useEffect te ajuda ao desmontar os recursos, exatamente como faria com ComponentWillUnmount.12345678910111213141516function Example() &#123; const [x, setX] = useState(0); const [y, setY] = useState(0); useEffect(() =&gt; &#123; const mouseMove = e =&gt; &#123; setX(e.screenX) setY(e.screenY) &#125; document.addEventListener('mousemove', mouseMove); return () =&gt; document.removeEventListener('mousemove', mouseMove); &#125;) return &lt;div&gt;O Mouse esta no &#123;x&#125;, &#123;y&#125;&lt;/div&gt;;&#125;Acima temos o evento de mousemove configurado para alterar o estado do componente de acordo com o movimento do mouse e quando o componente for desmontado será rodado o removeEventListener. Também será chamada quando for detectado que o useEffect precisa rodar novamente, ou seja em cada render. A cada alteração no estado do componente nosso evento está sendo removido e adicionado novamente. Agora não queremos isso e precisamos que o evento seja adicionado na montagem e na desmontagem.Vamos utilizar o segundo argumento que o useEffect recebe, que é uma lista dos valores que devem mudar para que ele rode novamente. Passando uma lista vazia, ele irá rodar apenas quando é montado e a função de limpeza apenas quando é desmontado.12345678910111213141516function Example() &#123; const [x, setX] = useState(0) const [y, setY] = useState(0) useEffect(() =&gt; &#123; const mouseMove = e =&gt; &#123; setX(e.clientX) setY(e.clientY) &#125; document.addEventListener('mousemove', mouseMove); return () =&gt; document.removeEventListener('mousemove', mouseMove); &#125;, []) // &lt;-- lista vazia return &lt;div&gt; Mouse esta no &#123;x&#125;, &#123;y&#125;&lt;/div&gt;;&#125;Os Event listeners serão chamados apenas quando precisamos. O segundo parâmetro pode ser utilizado para dizer quando nosso efeito vai rodar. Abaixo, um exemplo:123456789101112function Status(props) &#123; const [isOnline, setIsOnline] = useState(null); useEffect(() =&gt; &#123; const handleStatusChange = status =&gt; setIsOnline(status.isOnline) API.subscribeToUserStatus(props.user.id, handleStatusChange) return () =&gt; API.unsubscribeFromUserStatus(props.user.id, handleStatusChange) &#125;, [props.user.id]) // apenas se desinscreve caso props.friend.id mude&#125;Quando friend.id for alterado, iremos chamar o unsubscribeFromUserStatus com id anterior e depois chamar o subscribeToUserStatus com id atual, assim temos consistência na limpeza dos recursos de forma simples.Hook customizadoOs Hooks são totalmente desacoplados de componentes, o que nos permite combiná-los para criar novos hooks mais específicos e compartilhar lógica entre nossos componentes.Começaremos com o exemplo abaixo:123456789101112131415161718import React, &#123; useState, useEffect &#125; from 'react'; function Status(props) &#123; const [isOnline, setIsOnline] = useState(null); useEffect(() =&gt; &#123; const handleStatusChange = status =&gt; status.isOnline API.subscribeToUSerStatus(props.user.id, handleStatusChange) return () =&gt; API.unsubscribeFromUSerStatus(props.user.id, handleStatusChange) &#125; &#125;) if (isOnline === null) return 'Loading...'; return isOnline ? 'Online' : 'Offline';&#125;Também vamos precisar de uma lista de contatos e exibir seus respectivos status.1234567891011121314import React, &#123; useState, useEffect &#125; from 'react'; function UserListItem(props) &#123; const [isOnline, setIsOnline] = useState(null); useEffect(() =&gt; &#123; const handleStatusChange = status =&gt; status.isOnline ChatAPI.subscribeToUserStatus(props.user.id, handleStatusChange) return () =&gt; API.unsubscribeFromUserStatus(props.user.id, handleStatusChange) &#125;) return &lt;li style=&#123;&#123; color: isOnline ? 'green' : 'black' &#125;&#125;&gt;&#123;props.user.name&#125;&lt;/li&gt;;&#125;Com isso, temos uma repetição de código. Resolveremos isso, ao extrair a lógica repetida em um hook customizado.1234567891011121314import React, &#123; useState, useEffect &#125; from 'react'; function useUserStatus(userID) &#123; const [isOnline, setIsOnline] = useState(null); useEffect(() =&gt; &#123; const handleStatusChange = status =&gt; status.isOnline API.subscribeToUserStatus(userID, handleStatusChange) return () =&gt; API.unsubscribeFromUserStatus(userID, handleStatusChange) &#125;) return isOnline;&#125;Agora a lógica que tínhamos em nossos componentes, está em uma função separada (um padrão: que os hooks tenham o prefixo use). Abaixo, exemplo da utilização:1234567function UserStatus(props) &#123; const isOnline = useUserStatus(props.user.id) if (isOnline === null) return 'Loading...'; return isOnline ? 'Online' : 'Offline';&#125;12345function UserListItem(props) &#123; const isOnline = useUserStatus(props.user.id) return &lt;li style=&#123;&#123; color: isOnline ? 'green' : 'black' &#125;&#125;&gt;&#123;props.user.name&#125;&lt;/li&gt;;&#125;Agora temos uma lógica simplificada. Também é possível criar hooks para lidar com bibliotecas externas:12345678910import React, &#123; useState, useEffect &#125; from 'react'; const useObservable = (observable, initialValue) =&gt; &#123; const [value, setValue] = useState(initialValue) useEffect(() =&gt; &#123; const subscription = observable.subscribe(&#123;next: setValue&#125;) return () =&gt; subscription.unsubscribe() &#125;, [observable]) return value&#125;Acima, a cada novo evento no stream do observable temos uma atualização no estado. Abaixo, um exemplo usando a bilbioteca RxJS.123456789101112import React from 'react';import &#123; fromEvent &#125; from 'rxjs';import &#123; map &#125; from 'rxjs/operators';import &#123; useObservable &#125; from './observableHook'; const mouseTest = fromEvent(document, 'mousemove').pipe( map(e =&gt; [e.clientX, e.clientY]) ); const App = () =&gt; &#123; const [x,y] = useObservable(mouseTest, [0,0]); return &lt;div&gt;Mouse x:&#123;x&#125; y:&#123;y&#125;&lt;/div&gt;;&#125;Considerações finaisNão foi falado muito sobre os Outros Hooks, mas podemos ver a listagem no ínício deste artigo. Mais sobre os Hooks, podem ser vistos na documentação oficial e em próximos artigos.","pubDate":"Mon, 10 Jun 2019 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/react-hooks/","category":"react"},{"title":"React - Ciclo de vida e context API","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/react-ciclo-de-vida-e-context-api/","description":"Na versão 16.3.0, que foi lançada em 29 de março de 2018, teve a adição de novos métodos para o ciclo de vida dos componentes e nova API.Métodos de ciclo de vidaNo ciclo de vida dos componentes existem métodos para controlarmos o fluxo de montar, atualizar e desmontar cada elemento. E com essa versão do React, três métodos estão sendo depreciados: componentWillMount, componentWillReceiveProps, e componentWillUpdate. E foram adicionados dois novos métodos:getDerivedStateFromProps – adicionado como uma alternativa mais segura do método componentWillReceiveProps. Executado tanto na inicialização do componente quanto na sua atualização de propriedades e deve retornar as alterações no estado do componente baseada nas propriedades ou nulo.getSnapshotBeforeUpdate – adicionado para oferecer suporte à leitura segura de propriedades. Todo valor retornado por esse método é enviado ao componentDidUpdate que é o ciclo executado posteriormente.Context APISempre existiu uma Context API, mas era instável e com diversos problemas relacionados à performance. Eu particularmente já usava para uma questão de tema e gostei muito da estabilide que veio nessa versão.Ao compartilhar informações entre componentes totalmente desconexos você terá que utilizar a arquitetura flux com Redux. Com a nova Context API conseguimos facilmente repassar informações de qualquer tipo entre diversos componentes do React.Precisaremos ver 3 coisas: React.createContext, Provider e Consumer.Abaixo, temos o componente filho Title e ainda não estamos usando a nova API de contexto.12345678910111213141516class App extends Component &#123; state = &#123; ttile: 'Esse é um título' &#125; render() &#123; const &#123; title &#125; = this.state; return ( &#123;tenant &amp;&amp; &lt;div className=\"container\"&gt; &lt;Title /&gt; &lt;/div&gt; &#125; ); &#125;&#125;Vamos começar criando uma variável de contexto com o comando React.createContext passando como parâmetro o valor padrão quando nenhum valor existir nessa variável.1const ExampleContext = React.createContext('example');A variável ExampleContext já pode ser considerada uma variável de contexto. Para alterar o seu valor, precisamos utilizar um componente chamado Provider que pertence à essa variável:123456789101112render() &#123; const &#123; title &#125; = this.state; return ( &lt;ExampleContext.Provider value=&#123;title&#125;&gt; &#123;title &amp;&amp; &lt;div className=\"container\"&gt; &lt;Title /&gt; &lt;/div&gt; &#125; &lt;/ExampleContext.Provider&gt; );&#125;Assim, criamos um ExampleContext.Provider com uma única propriedade chamada value que é responsável por prover o valor da variável de contexto.Agora o componente Title, consome o ExampleContext:123456789function Title() &#123; return ( &lt;ExampleContext.Consumer&gt; &#123;title =&gt; ( &lt;h1&gt;&#123;title&#125;&lt;/h1&gt; )&#125; &lt;/ExampleContext.Consumer&gt; );&#125;Com o ThemeContext.Consumer podemos utilizar esses dados e trabalhar com uma técnica chamada render props.Sendo assim, você não vai mais precisar utilizar o Redux sempre que precisar compartilhar informações entre componentes, mas vale lembrar que a arquitetura Flux é muito mais do que simplesmente compartilhamento de dados, tem a ver com estrutura, com fluxo de informações e arquitetura dos dados da aplicação.Para retornar o valor padrão que informamos na criação da variável ExampleContext, o componente não deverá possuir um Provedor correspondente acima dele na árvore. Isso pode ser útil para testar componentes isoladamente sem envolvê-los.12345678910render() &#123; const &#123; title &#125; = this.state; return ( &lt;div className=\"container\"&gt; &lt;Title /&gt; &lt;/div&gt; );&#125;// Saída: exampleMais pode ser visto na documentação oficial.Considerações finaisEntão vamos continuar precisando de um gerenciamento de estado mais complexo como o Redux e temos a API de contexto quando for necessário compartilhar algumas informações entre componentes.Agora é ficar ligado nos novos métodos e prestar atenção nos que foram depreciados. A biblioteca está evoluindo muito bem e vamos botar a mão na massa.","pubDate":"Mon, 03 Jun 2019 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/react-ciclo-de-vida-e-context-api/","category":"react"},{"title":"React - Mudanças na versão 16","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/react-mudancas-na-versao-16-/","description":"A versão 16.0.0, foi lançado em 26 de setembro de 2017, e trouxe mudanças significativas até o momento.Polêmica com a licençaPor um período os desenvolvedores ficaram preocupados com a ideia da biblioteca ter adotado a licença BSD+Patents. Tudo ficou na paz, quando o React 16 foi disponível sob a licença MIT. A versão 15.6.2 também foi publicado com essa licença, para que não fosse preciso que as aplicações fossem atualizadas imediatamente.Novo tamanhoAgora mesmo com novas funcionalidades, o tamanho diminuiu cerca de 32%, se comparado com a versão 15.6.1.Versão 15react - 20.7kb (6.9kb com gzip)react-dom - 141kb (42.9kb com gzip)react + react-dom - 161.7 kb (49.8 kb com gzip)Versão 16react - 5.3kb (2.2kb com gzip)react-dom - 103.7kb (32.6kb com gzip)react + react-dom - 109 kb (34.8 kb com gzip)Tratamento de errosAntes tínhamos o problema que ao ter um erro durante a renderização, toda a árvore de componentes era desmontada. Agora é possível capturar os erros e substituir o componente. Quem não gosta de um try-catch? :)Temos então, o novo método componentDidCatch, que irá informar o erro para que possamos tratar com facilidade. Identificando um erro, podemos tratar no método render.12345678910111213141516componentDidCatch(error, info) &#123; this.setState(&#123; ...state, hasError: true &#125;); // E você também tem 2 paramêtros para utilizar console.log(error); // o erro em si console.log(info); // contém o Component Stack&#125;render() &#123; if (this.state.hasError) &#123; return &lt;h1&gt;Deu algo errado&lt;/h1&gt;; &#125; else &#123; // retornando o componente ... &#125;&#125;Para mais detalhes, confira o artigo oficial sobre o tratamento de erros no React 16.Novos tipos de retorno de renderizaçãoAo trabalhar com React, o método render sempre deve retornar um único elemento. Querendo retonar uma lista de elementos, você deve criar um container para eles.Agora você pode retornar um Array de elementos. Por ser um Array, você ainda precisará adicionar o atributo key aos elementos.1234567render() &#123; return [ &lt;li key=\"item1\"&gt;item 1&lt;/li&gt;, &lt;li key=\"item2\"&gt;item 2&lt;/li&gt;, &lt;li key=\"item3\"&gt;item 3&lt;/li&gt;, ];&#125;E também é possível retornar uma simples String:123render() &#123; return 'Meu nome é Hemerson';&#125;PortalsAgora é possível inserir um elemento filho em um local diferente no DOM, fora da sua árvore principal.Exemplo:1234&lt;body&gt; &lt;div id=\"main\"&gt;&lt;/div&gt; &lt;div id=\"modal\"&gt;&lt;/div&gt;&lt;body&gt;Com Portals, tendo um componente na div main, será possivel pegar este componente e renderizá-lo na div modal.Tendo um elemento que irá aparecer na página e reaparecer ao abrir uma modal, seria necessário chamar o componente em dois lugares (na página e na modal) e passar as propriedades para ele. Com Portals basta indicar o elemento que quer usar e onde quer exibí-lo. Querendo alterar alguma propriedade passada para o componente, só será preciso alterar em um lugar.Mais detalhes na documentação;Renderização no lado do servidorGraças a reescrita, a renderização no lado do servidor ficou muito mais rápida. E agora com suporte a streaming, sendo possível enviar os dados de forma melhor e mais ágil para o navegador.Nesse artigo, pode ser visto as melhorias no SSR.Atributos personalizadosAtributos informados no HTML ou SVG que não fossem reconhecidos eram ignorados. Agora os mesmos são mantidos.12345678&lt;!-- nosso código --&gt;&lt;div example=\"test\" /&gt;&lt;!-- React 15 --&gt;&lt;div /&gt;&lt;!-- React 16 --&gt;&lt;div example=\"test\" /&gt;Nova arquiteturaAgora temos uma reescrita na arquitetura central da biblioteca, sendo conhecida como Fiber. O mesmo é responsável pela maioria dos novos recursos do React 16.Uma área que está tendo um bom foco é a renderização assíncrona, tendo uma estratégia para programar cooperativamente a renderização, entregando periodicamente a execução ao navegador. Com a renderização assíncrona, as aplicações são mais responsivas porque o React evita o bloqueio da árvore principal. Nessa versão 16.0.0 não foi ativado nenhum recurso assíncrono, para facilitar a migração para essa versão.Confira um exemplo de problema de renderização assíncrona.Depreciações, mudanças, empacotamento e requisitosDepreciaçõesPara hidratar um container renderizado pelo servidor agora tem uma API explicita. Renderizando o HTML pelo servidor, use ReactDOM.hydrate ao invés de ReactDOM.render. Use ReactDOM.render se renderizar pelo lado do cliente.O suporte ao React Addons foi descontinuado e com exceção do react-addons-perf que terá uma versão nova, os outros addons não serão atualizados. react-addons-perf não funciona no React 16, e é encorajado usar as ferramentas do navegador para medir performance.MudançasO React 16 depende dos tipos de coleção Map e Set. Se você precisa dar suporte para navegadores e dispositivos antigos que não suportam nativamente (por exemplo, IE &lt;11) ou que tenham implementações não compatíveis (por exemplo, IE 11), será necessário incluir um polyfill na aplicação, como core-js ou babel-polyfill. Confira mais sobre o assunto.Algumas mudanças que podem causar quebras em relação às versões anteriores:ReactDOM.render e ReactDOM.unstable_renderIntoContainer agora retornam null se forem chamados de dentro de um método do ciclo de vida do componente. Para contornar isso, você pode usar portals ou refs.Chamar setState com null não dispara mais atualizaçõesChamar setState diretamente dentro de render sempre causa atualizações.Callbacks de setState agora são disparados após componentDidMount ou componentDidUpdate.Ao trocar por , B.componentWillMount agora vai sempre acontecer antes de A.componentWillUnmount. Antes, A.componentWillUnmount podia inicializar primeiro em certos casos.Antes, mudar a referência de um componente sempre iria desmontar a referência antes que o renderização do componente fosse chamada. Agora, a referência é alterada depois, quando aplicadas as mudanças no DOM.componentDidUpdate não recebe mais o parâmetro prevContext.O renderizador superficial não é mais chamado no componentDidUpdate porque as referências DOM não estão disponíveis. Isso também o torna consistente com componentDidMount(que também não é chamado nas versões anteriores).EmpacotamentoAgora não existe mais react/lib/ e react-dom/lib/. Os nomes/caminhos mudaram para enfatizar a diferença entre os builds de produção e desenvolvimento:react/dist/react.js → react/umd/react.development.jsreact/dist/react.min.js → react/umd/react.production.min.jsreact-dom/dist/react-dom.js → react-dom/umd/react-dom.development.jsreact-dom/dist/react-dom.min.js → react-dom/umd/react-dom.production.min.jsConsiderações finaisMuitas mudanças boas vieram e o React continua sendo muito usado nas aplicações. Pode conferir o artigo completo no blog oficial sobre a versão 16.0.0.","pubDate":"Sat, 01 Jun 2019 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/react-mudancas-na-versao-16-/","category":"react"},{"title":"Começando com React","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/comecando-com-react/","description":"A biblioteca que é largamente usada no desenvolvimento front-end já está na versão 16.8.6, que foi lançada em 27 de março deste ano.Para quem está começando com o React, vale saber que teve algumas mudanças significativas a partir da versão 16.0.0, lançada em 26 de setembro de 2017 (veremos sobre isso no próximo artigo).Antes de tudo, vale saber da linha do tempo.A Linha do tempoHá exatos seis anos (29 de maio de 2013), uma biblioteca JavaScript de código aberto, que foi desenvolvida pelo Facebook, era lançada. Sendo óbvio, estou falando da biblioteca React. Para ser mais preciso, a pessoa que está por trás dessa criação é Jordan Walke (Engenheiro de software na empresa Facebook).Tivemos o lançamento do React Native, em 26 de março de 2015.Em 18 de abril de 2017, o Facebook anunciou o React Fiber, um novo algoritmo core da biblioteca. Com o propósito de se tornar a base de qualquer melhoria futura e desenvolvimento de recursos da biblioteca React.No dia seguinte (19 de abril de 2017), foi lançado o React 360, para o público. Isso permitiu aos desenvolvedores que utilizam React, saltassem para o desenvolvimento de VR (Realidade Virtual).Por fim, temos a versão 16 e 16.8.6 da biblioteca, como mencionado no início desse artigo. Sem esquecer que na versão 16.8, temos o suporte estável na utilização de Hooks, que veremos nos próximos artigos.A BibliotecaA biblioteca ganhou grande popularidade por ter o foco na criação de componentes de interface, ter uma grande empresa por trás, usar uma técnica que agradou à todos (Virtual-Dom) e ter uma pequena curva de aprendizado para quem já está acostumando com JavaScript.Abaixo, também veremos sobre a especificação JSX e micro bibliotecas que auxiliam o desenvolvimento com React.Virtual-DOMÉ uma representação em JavaScript puro do DOM. Sendo assim, você manipula esse objeto e não o DOM de verdade. Quando o objeto virtual é atualizado, um algoritmo calcula a diferença entre o virtual-dom e o DOM real, alterando então os trechos do DOM.É mais produtivo criar os elementos DOM no JavaScript, processar eles e aplicá-los de uma só vez na arvore DOM do navegador. A biblioteca veio para facilitar isso, entre outras coisas.JSXJSX é uma especificação de sintaxe para escrever JavaScript como se estivéssemos escrevendo XML.12345678910cont Example = React.createClass(&#123; render: function() &#123; return &lt;div&gt;Olá, &#123;this.props.name&#125;&lt;/div&gt;; &#125;&#125;);ReactDOM.render( &lt;Example name=\"Hemerson\" /&gt;, document.getElementById('main'));Sem JSX:1234567891011var Example = React.createClass(&#123; displayName: 'Hello', render: function() &#123; return React.createElement(\"div\", null, \"Olá, \", this.props.name); &#125;&#125;);ReactDOM.render( React.createElement(Example, &#123;name: \"Hemerson\"&#125;), document.getElementById('main'));Micro-bibliotecasSendo apenas uma biblioteca, não seria possível criar aplicações complexas, apenas com React. Por isso, vamos falar um pouco nas micro-bibliotecas que ajudam muito no desenvolvimento.As mais utilizadas nos projetos são react-router e react-redux. Com elas, já é capaz de criar uma projeto SPA complexo.Cada vez mais o caminho tem sido separar as responsabilidades, por uma questão de manutenção, peso e mais.Nesse link, temos muitas micro-bibliotecas para nos ajudar.Considerações finaisTenho gostado de utilizar o React, pela liberdade no desenvolvimento de componentes e pela estabilidade e flexibilidade da ferramenta. Nos dias de hoje, podemos usar no navegador, servidor e aplicativos móveis. A comunidade está empenhada no crescimento e melhorias. A cada ano temos evoluções consideráveis da biblioteca e ferramentas que utilizamos como suporte no desenvolvimento das aplicações.","pubDate":"Wed, 29 May 2019 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react/comecando-com-react/","category":"react"},{"title":"React Native - Criando layouts - Parte 2","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-criando-layouts-parte-2/","description":"Dando continuidade ao artigo Criando Layouts. Na parte 1, vimos o Stack layout e agora vamos continuar vendo os tipos de layout que conseguimos criar no React native.Grid LayoutO React Native não vem com um sistema de layout de grade, mas o flexbox é flexível o suficiente para criar um. Ao utilizar o que já vimos até agora, podemos recriar um grid layout usando o flexbox. Ex:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import React, &#123; Component &#125; from 'react';import &#123; StyleSheet, View&#125; from 'react-native'; export default class GridLayout extends Component &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;View style=&#123;styles.row&#125;&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box3]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.two]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.row&#125;&gt; &lt;View style=&#123;[styles.box, styles.two]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box3]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.row&#125;&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.two]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box3]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.row&#125;&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box3]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.row&#125;&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.row&#125;&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;/View&gt; ); &#125;&#125; const styles = StyleSheet.create(&#123; container: &#123; flex: 1 &#125;, row: &#123; flex: 1, flexDirection: 'row', justifyContent: 'space-between', marginBottom: 10 &#125;, box: &#123; flex: 1, height: 100, backgroundColor: '#333', &#125;, box2: &#123; backgroundColor: 'green' &#125;, box3: &#123; backgroundColor: 'orange' &#125;, two: &#123; flex: 2 &#125;&#125;);No código acima, você pode ver que estamos simulando o que costumamos fazer em uma estrutura de grade no CSS. Cada linha com uma exibição separada e os itens da grade estão dentro dela. O valor 1 na propriedade flex é aplicado a cada item para que eles compartilhem igualmente o espaço disponível em cada linha. Mas para itens que precisam ocupar um espaço maior, um valor flex maior é aplicado. Isso ajusta automaticamente a largura dos outros itens para acomodar todos os itens.Se você quiser adicionar espaços entre cada item de uma linha, você pode adicionar um preenchimento a cada um deles e criar uma caixa dentro de cada um. Ex:Absolute LayoutO React Native só suporta os valores absolutee relative, para a propriedade position. Isso não limita muito, porque sempre podemos combiná-los com o flexbox para posicionar os diferentes elementos em qualquer lugar que desejarmos. Ex:Podemos conseguir isso facilmente se tivermos um comando total sobre os valores de posicionamento disponíveis no navegador. Mas, como estamos no React Native, precisamos pensar primeiro no modo flexbox e usar o posicionamento CSS para as caixas.Usando o flexbox, isso pode ser conseguido de duas maneiras. Você pode usar row ou columnpara a propriedade flexDirection no elemento pai. Usando o valor row no flexDirection, a tela seja dividida em três colunas. A primeira coluna conterá a caixa vermelha, a segunda coluna conterá as caixas azul, cinza e verde e a terceira conterá as caixas amarela e roxa.123456789101112131415161718192021222324252627282930import React, &#123; Component &#125; from 'react';import &#123; StyleSheet, View &#125; from 'react-native'; export default class Positioning extends Component &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;View style=&#123;styles.left&#125;&gt; &lt;View style=&#123;[styles.box, styles.bigRedBox]&#125;&gt; &lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.middle&#125;&gt; &lt;View style=&#123;[styles.box, styles.bigBlueBox]&#125;&gt; &lt;View style=&#123;[styles.innerBox, styles.blackBox]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;[styles.bigGrayBox]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.bigGreenBox]&#125;&gt; &lt;View style=&#123;[styles.innerBox, styles.blackBox]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.right&#125;&gt; &lt;View style=&#123;[styles.box, styles.bigYellowBox]&#125;&gt; &lt;View style=&#123;[styles.innerBox, styles.blackBox]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;[styles.innerBox, styles.purpleBox]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;/View&gt; ); &#125;&#125;A primeira coluna tem apenas a caixa vermelha, basta definir a propriedade justifyContent com center no elemento pai que define a coluna. Como já vimos, o o valor default do flexDirection é column. Isto significa que se você definir justifyContent como center, os elementos filhos serão alinhados no centro do eixo Y.A segunda coluna tem basicamente a mesma ideia que a primeira, só que desta vez não queremos alinhar todas as caixas ao centro. O que queremos é que eles tenham espaços iguais entre eles. A propriedade justifyContent com valor space-between, resolve isso. Mas ao mesmo tempo, também queremos centralizar os elementos filhos no eixo x, então nós usamos alignItems com valor center.A única parte complicada aqui é que você não deve aplicar nenhuma propriedade width a caixa cinza porque queremos que ele ocupe todo o espaço do elemento pai. Uma vez que não aplicamos a propriedade width, devemos usar a propriedade alignSelf com valor stretch, para que a caixa cinza ocupe a largura total do seu elemento pai.Em seguida, para posicionar a pequena caixa preta um pouco longe de sua posição relativa, usamos position com o valor relative e depois acrescentamos as propriedades top e left com os valores que queremos, porque sua posição relativa está em torno do canto superior esquerdo de seu pai.Na pequena caixa roxa, colocamos a propriedade position com o valor absolute e as propriedades bottom e right, para alinhá-la ao canto inferior direito de seu pai. Isso funciona porque elementos posicionados com position: absolute no React Native estão vinculados aos seus pais.A terceira coluna basicamente aplica a mesma ideia.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859const styles = StyleSheet.create(&#123; container: &#123; flex: 1, flexDirection: 'row', &#125;, left: &#123; flex: 1, justifyContent: 'center', &#125;, middle: &#123; flex: 5, justifyContent: 'space-between', alignItems: 'center', &#125;, right: &#123; flex: 1, justifyContent: 'center', alignItems: 'flex-end', &#125;, box: &#123; width: 100, height: 100, backgroundColor: '#f2f2f2', &#125;, bigGreenBox: &#123; backgroundColor: 'green' &#125;, bigRedBox: &#123; backgroundColor: 'red' &#125;, bigYellowBox: &#123; backgroundColor: 'yellow' &#125;, bigGrayBox: &#123; height: 100, alignSelf: 'stretch', backgroundColor: '#ccc' &#125;, innerBox: &#123; width: 20, height: 20, &#125;, redBox: &#123; position: 'relative', backgroundColor: 'red', top: 10, left: 10 &#125;, blueBox: &#123; position: 'absolute', backgroundColor: 'blue', top: 10, right: 10 &#125;, purpleBox: &#123; position: 'absolute', backgroundColor: 'purple', bottom: 10, right: 10 &#125;, blackBox: &#123; position: 'relative', backgroundColor: 'black', &#125;&#125;);Header e footer fixos.Para isso, precisamos usar o componente de ScrollView, se o conteúdo for maior que a altura do elemento, o React Native gerará automaticamente uma barra de rolagem vertical. Isso nos permite adicionar marginTop e marginBottom no elemento com o conteúdo principal, para que o header e o footer fixos não obstruam o conteúdo principal. Os valores de left e right do header e footer estão configurados com 0, para que eles ocupem a largura total do dispositivo.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import React, &#123; Component &#125; from 'react';import &#123; StyleSheet, View, ScrollView &#125; from 'react-native'; export default class FixedHeaderFooter extends Component &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;View style=&#123;[styles.header]&#125;&gt;&lt;/View&gt; &lt;ScrollView&gt; &lt;View style=&#123;[styles.content]&#125;&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;/ScrollView&gt; &lt;View style=&#123;[styles.footer]&#125;&gt;&lt;/View&gt; &lt;/View&gt; ); &#125;&#125; const styles = StyleSheet.create(&#123; container: &#123; flex: 1, flexDirection: 'column', justifyContent: 'center' &#125;, header: &#123; height: 40, position: 'absolute', left: 0, right: 0, top: 0, backgroundColor: 'red, zIndex: 10 &#125;, content: &#123; alignItems: 'center', marginTop: 50, marginBottom: 40 &#125;, footer: &#123; height: 40, position: 'absolute', left: 0, right: 0, bottom: 0, backgroundColor: 'blue' &#125;, box: &#123; width: 100, height: 100, backgroundColor: 'gray', marginBottom: 10 &#125;&#125;);ConclusãoVimos como usar o Flexbox do React Native para posicionar os elementos e criarmos os layouts. Espero que essas duas partes consigam te ajudar na tarefa de criação de layouts e que tenha ajudado a conhecer as propriedades mencionadas.O repositório nexus-react-native/04-how-to-create-layouts, está a disposição para praticar. :)","pubDate":"Wed, 07 Feb 2018 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-criando-layouts-parte-2/","category":"react-native"},{"title":"React Native - Criando layouts - Parte 1","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-criando-layouts-parte-1/","description":"Para criar um layout no React Native vamos usar o Flexbox, mas nem todos os recursos que estão na especificação do Flexbox, estão incluídos. :/Stack LayoutEsse layout na orientação vertical empilha elementos em cima uns dos outros, enquanto que para a orientação horizontal, os elementos são colocados lado a lado. Vejamos a orientação vertical:1234567891011121314151617181920212223242526272829import React, &#123; Component &#125; from 'react';import &#123; StyleSheet, View, Dimensions &#125; from 'react-native'; const &#123; height &#125; = Dimensions.get('window');const boxCount = 3;const boxHeight = height / boxCount; export default class VerticalStackLayout extends Component &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;View style=&#123;[styles.box, styles.box1]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box3]&#125;&gt;&lt;/View&gt; &lt;/View&gt; ); &#125;&#125; const styles = StyleSheet.create(&#123; container: &#123; flex: 1, flexDirection: 'column' &#125;, box: &#123; height: boxHeight &#125;, box1: &#123; backgroundColor: 'red' &#125;, box2: &#123; backgroundColor: 'blue' &#125;, box3: &#123; backgroundColor: 'green' &#125;&#125;);No elemento pai(container), usaremos a propriedade flex. O valor é a quantidade de espaço que ele ocupará. Sendo 1, isso significa que ele ocupará todo o espaço disponível, desde que o elemento não tenha irmãos.A propriedade flexDirection permite que você especifique o eixo principal do layout. Por padrão, isso é definido como column. O valor de flexDirection sendo column, significa que os elementos filhos serão dispostos verticalmente (empilhados uns sobre os outros). Se o valor for row, significa que os filhos serão dispostos horizontalmente (lado a lado).O exemplo acima mostra a maneira manual. O uso de Dimensions para calcular a largura ou a altura dos elementos falhará se o seu aplicativo suportar a orientação do dispositivo retrato e paisagem. Isso ocorre porque assim que o usuário virar seu dispositivo, a largura ou a altura que você calculou não serão atualizadas. Exemplo mudando a orientação:O Flexbox faz a computação para você, se você fornecer os valores corretos. Para alcançar o mesmo layout acima, sem usar o Dimensions, tudo o que você precisa fazer é especificar flex: 1 para todas as caixas, em vez de especificar o valor para a propriedade height:123box: &#123; flex: 1&#125;,Agora podemos evoluir esse layout com o uso do flex nos elementos irmãos.123456789101112131415//headerbox1: &#123; flex: 1, backgroundColor: 'red',&#125;,//contentbox2: &#123; flex: 10, backgroundColor: 'blue',&#125;,//footerbox3: &#123; flex: .5, backgroundColor: 'green',&#125;Tenha em mente que se conteúdo interno for maior do que a altura máxima disponível, o resto do seu conteúdo será oculto. Se você espera que seu conteúdo ultrapasse esse limite, você pode usar o componente de ScrollView, incorporado para gerar automaticamente uma barra de rolagem vertical, como em uma página da web.HorizontalPara implementar a orientação horizontal, basta mudar o flexDirection para row. Colocando o valor de flex do box novamente para 1, isso resulta em que 3 colunas ocuparam toda a tela.12345678container: &#123; flex: 1, flexDirection: 'row',&#125;,box: &#123; flex: 1 &#125;,box1: &#123; backgroundColor: 'red' &#125;,box2: &#123; backgroundColor: 'blue' &#125;,box3: &#123; backgroundColor: 'green' &#125;Justificando o conteúdoSe você deseja controlar a distribuição dos elementos filhos, é necessário utilizar a propriedade justifyContent no elemento pai.123456789container: &#123; flex: 1, flexDirection: 'column', justifyContent: 'flex-start',&#125;,box: &#123; height: boxHeight &#125;,box1: &#123; backgroundColor: 'red' &#125;,box2: &#123; backgroundColor: 'blue' &#125;,box3: &#123; backgroundColor: 'green' &#125;Abaixo vamos ver os 5 valores possíveis que podem ser usados ​​com essa propriedade. Você não conseguirá ver nenhuma diferença se o valor da propriedade flex for 1, para cada um dos elementos filhos, porque eles ocupariam todo o espaço disponível.flex-start: os elementos filhos são alinhados em direção ao ponto de partida. Observe o fundo branco logo abaixo do último filho. É assim que você sabe que isso está sendo usado o flex-start.flex-end: os elementos filhos são alinhados em direção à linha final. Desta vez o espaço vazio estará no ponto de partida.center: os elementos filhos são colocados em direção ao centro. Desta vez, o espaço vazio é dividido igualmente entre o ponto inicial e final.space-around: os elementos filhos são distribuídos de modo que haveria espaço igual em cada um deles. Isso significa que os elementos na parte externa teriam menos espaço no lado externo e o espaço entre os dois filhos é duplicado.space-between: os elementos filhos são distribuídos de modo que haveria uma quantidade igual de espaço entre cada um deles.Como você pode ter notado, cada um desses valores de estilo dependem da altura ou largura dos elementos filhos. Depende da largura, se flexDirection for row e na altura se flexDirection for column.Por exemplo, space-between realmente não terá qualquer efeito em um Stack layout vertical se cada um dos elementos filhos estiver usando flex para controlar a altura. Isso ocorre porque não haverá mais espaço entre cada elemento para ocupar.Alinhando os itensjustifyContent e alignItems podem parecer como se estivessem fazendo o mesmo. Eles também compartilham três valores possíveis: flex-start, flex-end e center, com a adição do valor stretch na propriedade alignItems.A principal diferença entre justifyContent e alignItems é o eixo em que os elementos filhos são distribuídos. Como você vimos anteriormente, justifyContent sempre usa o eixo primário ao distribuir elementos filhos. Mas alignItems usa o eixo oposto ao primário.Nós já sabemos que o eixo é determinado pelo flexDirection que foi definido. Então, se flexDirection for row, o eixo primário flui da esquerda para a direita. Isso significa que o eixo transversal irá fluir de cima para baixo. Por outro lado, se flexDirection é column que o eixo transversal irá fluir da esquerda para a direita.Abaixo vamos ver alguns exemplos com justifyContent e alignItems implementados lado a lado com o flexDirection de row. O primeiro usa justifyContent enquanto o segundo usa alignItems.flex-start: o posicionamento dos elementos é o mesmo, por isso que a implementação de alignItems e justifyContent, são iguais.flex-end: agora começamos a ver uma diferença. Com justifyContent, os elementos filhos irão para o final da primeira linha, enquanto com alignItems os elementos filhos irão estar no início da última linha.center: tem a mesma ideia do resto dos valores que usamos até agora. Com justifyContent, os itens são centrados no eixo x enquanto com alignItems, os itens estão centrados no eixo y.stretch: use para que os elementos filhos se estendam para preencher o elemento pai. Este é o valor padrão para alignItems, portanto, especificar esse valor é opcional.Abaixo temos o trecho de código usado nos exemplos acima. Basta alterar os valores para o flexDirection, justifyContent e alignItems:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import React, &#123; Component &#125; from 'react';import &#123; StyleSheet, View&#125; from 'react-native'; export default class AlignItems extends Component &#123; render() &#123; return ( &lt;View style=&#123;styles.wrapper&#125;&gt; &lt;View style=&#123;styles.container&#125;&gt; &lt;View style=&#123;[styles.box, styles.box1]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box3]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;View style=&#123;styles.container2&#125;&gt; &lt;View style=&#123;[styles.box, styles.box1]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box2]&#125;&gt;&lt;/View&gt; &lt;View style=&#123;[styles.box, styles.box3]&#125;&gt;&lt;/View&gt; &lt;/View&gt; &lt;/View&gt; ); &#125;&#125; const styles = StyleSheet.create(&#123; wrapper: &#123; flex: 1 &#125;, container: &#123; flex: .5, flexDirection: 'row', justifyContent: 'flex-start', borderBottomWidth: 1, borderBottomColor: '#000' &#125;, container2: &#123; flex: .5, flexDirection: 'row', alignItems: 'flex-start' &#125;, box: &#123; width: 100, height: 100 &#125;, box1: &#123; backgroundColor: '#2196F3' &#125;, box2: &#123; backgroundColor: '#8BC34A' &#125;, box3: &#123; backgroundColor: '#e3aa1a' &#125;&#125;);Se você quiser especificar o alinhamento de elementos filhos dentro de um elemento pai, você pode usar a propriedade alignSelf. Todos os valores possíveis de alignItems são aplicáveis ​​a esta propriedade. Então, por exemplo, você pode alinhar um único elemento à direita do seu elemento pai, enquanto todos os restantes estão alinhados à esquerda.ConclusãoNessa primeira parte, implementamos o Stack layout. E na segunda parte, vamos continuar vendo outros tipos de layout que podemos fazer.O repositório nexus-react-native/04-how-to-create-layouts, está a disposição para praticar. :)","pubDate":"Tue, 06 Feb 2018 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-criando-layouts-parte-1/","category":"react-native"},{"title":"React Native - Estilização","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-estilizacao/","description":"A grande vantagem que o React native nos traz, é tornar único o código tanto para Android, quanto para IOS. Não só pensando nos dispositivos móveis, graças ao React, o código pode ser utilizado no desenvolvimento web. Mas quando chegamos na parte de estilização, podemos ter que nos acostumar e perceber que nessa parte a diferença do que estamos acostumados a ver no desenvolvimento web, é maior que o esperado.Cascading Style Sheets (CSS)A princípio mexer com estilo no React native, parece ser bem simples. Podemos ver as regras de CSS e que diferente da web, onde as as mesmas são escritas em kebab-case, utilizaremos a sintaxe com CamelCase.O React Native utiliza o mecanismo de layout de Yoga, que implementa as especificações do flexbox e empresta nomes de regras CSS. Ex:1234.text &#123; font-family: Arial; font-size: 12px;&#125;Que ficaria assim no React native:123456const styles = StyleSheet.create(&#123; text: &#123; fontFamily: \"Arial\", fontSize: 12, &#125;&#125;);Isso faz com que a escrita do estilo seja muito familiar. Mas depois fica claro que o estilo no React Native é muito diferente do estilo na web. Nomes de regras e flexbox são as únicas coisas que o CSS e o estilo no React Native tem em comum.Escopo por componenteNo navegador, o CSS tem o escopo a nível da página. Para uma aplicação web de uma única página, isso significa que cada folha de estilo afeta a aplicação inteira. As regras de estilos individuais são aplicadas aos elementos no DOM, sendo definidos dentro dos blocos dos seletores. Existem muitas maneiras diferentes de selecionar os elementos DOM.Com o React Native, os estilos não tem efeito em seu aplicação, a menos que você os passe especificamente aos seus componentes. Não existe um conceito de seletor porque os componentes e os estilos estão bem acoplados. Isso significa que você pode usar o mesmo nome para estilos em várias folhas de estilo sem causar efeitos colaterais:123456789101112const headerStyles = StyleSheet.create(&#123; container: &#123; backgroundColor: 'red' &#125;&#125;);const footerStyles = StyleSheet.create(&#123; container: &#123; backgroundColor: 'red' &#125;&#125;);&lt;Header style=&#123;headerStyles.container&#125; /&gt;&lt;Footer style=&#123;footerStyles.container&#125; /&gt;HerançaOs estilos não são herdados por padrão. Na web, os elementos DOM herdam alguns dos estilos dos pais por padrão. Estes são principalmente estilos relacionados a texto, e isso significa que você pode fazer:123456789101112&lt;style&gt; .container &#123; font-family: Arial; font-size: 12px; &#125;&lt;/style&gt;&lt;div class=\"container\"&gt; &lt;h1&gt;Title&lt;/h1&gt; &lt;div&gt; &lt;p&gt;Test with &lt;strong&gt;text&lt;/strong&gt;&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;Que é equivalente a:123456789101112131415const styles = StyleSheet.create(&#123; container: &#123; fontFamily: 'Arial', fontSize: 12, &#125;, bold: &#123; fontWeight: '700', &#125;&#125;);&lt;View&gt; &lt;Text style=&#123;styles.container&#125;&gt;Title&lt;/Text&gt; &lt;View&gt; &lt;Text style=&#123;styles.container&#125;&gt;Test with &lt;Text style=&#123;styles.bold&#125;&gt;text&lt;/Text&gt;&lt;/Text&gt; &lt;/View&gt;&lt;/View&gt;Os componentes podem para passar propriedades de estilo para os componentes filho. É o caso do &lt;Text /&gt; do React Native. Um componente &lt;Text /&gt; que é filho de outro componente &lt;Text /&gt;, herdará seus estilos:1234&lt;Text style=&#123;styles.text&#125;&gt; Text &lt;Text style=&#123;&#123;fontWeight: bold&#125;&#125;&gt;Text&lt;/Text&gt;&lt;/Text&gt;O compartilhamento de estilos de texto com &lt;Text /&gt; tem uso limitado, pois &lt;Text /&gt; não permite que a maioria dos outros componentes React Native sejam seus filhos.Lógica no estiloO CSS é muito limitado na sua capacidade de calcular valores. Existem algumas funções que você pode usar, como calc() e as variáveis CSS são suportadas em navegadores modernos. Além disso, a lógica para calcular estilos dinamicamente precisa ocorrer em outros lugares, sendo compilado com pré-processadores (como SASS).No React Native, os estilos são definidos em JavaScript. Tendo uma linguagem de programação nos dá uma série de possibilidades.Assim, temos novos padrões de estilo. Esse é um repositório que vale a pena ver.Style e StyleSheetOs estilos só podem ser transmitidos diretamente para um componente, da mesma forma que você passaria estilos para elementos DOM através do atributo style:1&lt;p style=\"color: blue;\"&gt;text&lt;/p&gt;Achou que iria se livrar do estilo inline? XDA documentação do React native nos informar mais sobre o style.O que pode ser novo para você é o StyleSheet, que cria uma folha de estilo a partir de um objeto de estilo, tornando possível se referir a ele por ID ao invés de criar um novo objeto de estilo sempre.Gerenciando estilosPra mim, essa é a parte mais critica. Antes de recorrer a módulos de terceiros, uma escolha minha e um conselho é explorar as possibilidades ao utilizar o React native, principalmente se a ideia é ir para a linha universal (nativo e web).MixinsComo utilizamos no pré-processador SASS (meu preferido.. :D), os mixins são uma boa saída para reaproveitamento de código e organização:1234export const errorText = &#123; fontWeight: \"700\", color: \"red\",&#125;;123456789101112import &#123; errorText &#125; from \"textMixins\";export default StyleSheet.create(&#123; formErrorMessage: &#123; ...errorText, fontSize: 22, &#125;, fieldErrorMessage: &#123; ...errorText, fontSize: 18, &#125;,&#125;);Estilo globalComo em muitas metodologias de CSS, temos uma boa organização definido o estilo primitivo e o reutilizando em suas folhas de estilo. Ex:12345678910111213141516export const COLOR_BLUE = \"blue\";export const COLOR_RED = \"red\";// ...export default StyleSheet.create(&#123; blue: &#123; color: COLOR_BLUE &#125;, red: &#123; color: COLOR_RED &#125;, // ... bg_blue: &#123; backgroundColor: COLOR_BLUE &#125;, bg_red: &#123; backgroundColor: COLOR_RED &#125;, // ... o_100: &#123; opacity: 1 &#125;, o_90: &#123; opacity: 0.9 &#125;, o_80: &#123; opacity: 0.8 &#125;, // ...&#125;);Podendo ser usado assim:1234567891011import styles from \"styles\";class MyComponent extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;styles.bg_red&#125;&gt; &lt;Text style=&#123;[styles.blue, styles.o_90]&#125;&gt;Text&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;Ou assim:1234567891011121314151617181920import &#123; COLOR_BLUE, COLOR_RED &#125; from \"styles\";class MyComponent extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text style=&#123;styles.text&#125;&gt;Text&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const styles = &#123; container: &#123; backgroundColor: COLOR_BLUE, &#125;, text: &#123; color: COLOR_RED, &#125;&#125;Teste e busque a melhor solução para o seu projeto. Aqui veremos só algumas possibilidades. Então descubra o seu problema e comece a pensar na solução para a arquitetura.Muitas vezes, mesmo uma pequena mudança na forma como um componente funciona, significa que os nomes dos estilos não se encaixam. E os problemas podem aparecer e prejudicar o projeto. Então gaste um tempo, testando a necessidade do projeto e a melhor solução de organização e utilização.Funções auxiliaresEstilos em JavaScript significa que você obtém o poder de uma linguagem de programação em vez de uma linguagem de estilo simples.12345678910111213141516171819202122232425262728293031323334353637// font https://gist.github.com/samueljmurray/eeb9495146ef0aad24f534cecd17487cimport &#123; Dimensions &#125; from \"react-native\";// Heightconst screenSizes = [ &#123; name: \"xs\", height: 568 &#125;, &#123; name: \"s\", height: 667 &#125;];// Example usage:// screenSize(&#123;xs: 8, s: 12&#125;, 16)// screenSize(&#123;s: 12&#125;, 16)// screenSize(&#123;xs: 8&#125;, 16)export function screenSize(screenSizeOptions, defaultValue) &#123; const matchedScreenSizes = screenSizes.filter((screenSize) =&gt; &#123; return Dimensions.get(\"window\").height &lt; screenSize.height; &#125;); let value; const hasScreenSizeOption = matchedScreenSizes.some((matchedScreenSize) =&gt; &#123; if (screenSizeOptions.hasOwnProperty(matchedScreenSize.name)) &#123; value = screenSizeOptions[matchedScreenSize.name]; return true; &#125; else &#123; return false; &#125; &#125;); if (!hasScreenSizeOption) &#123; value = defaultValue; &#125; return value;Passando contexto para o estiloUm componente &lt;Button /&gt;, por exemplo, pode aceitar uma propriedade de cor (string) e estilo quando estiver desabilitado (booleano), que afetam o seu estilo:12345678export default StyleSheet.create(&#123; button: &#123; backgroundColor: \"red\", &#125;, buttonDisabled: &#123; backgroundColor: \"gray\", &#125;,&#125;);1234567891011121314151617import styles from \"buttonStyles\";class Button extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;[ styles.button, this.props.color &amp;&amp; &#123; backgroundColor: this.props.color &#125;, this.props.disabled &amp;&amp; styles.buttonDisabled, ]&#125;&gt; // ... &lt;/View&gt; ); &#125;&#125;O problema do exemplo acima, que pode ficar muita lógica misturada (estilo e funcionalidade do componente). Então, vamos deixar a lógica de estilo no seu devido lugar.12345678910111213export default (props) =&gt; StyleSheet.create(&#123; button: StyleSheet.flatten([ &#123; backgroundColor: \"red\", &#125;, props.color &amp;&amp; &#123; backgroundColor: props.color, &#125;, props.disabled &amp;&amp; &#123; backgroundColor: \"gray\", &#125;, ]),&#125;);123456789101112import styles from \"buttonStyles\";class Button extends React.Component &#123; render() &#123; const s = styles(this.props); return ( &lt;View style=&#123;s.button&#125;&gt; // ... &lt;/View&gt; ); &#125;&#125;Mais um exemplo, sem StyleSheet:12345678910111213141516class Button extends React.Component &#123; render() &#123; const s = styles(this.props); return ( &lt;View style=&#123;s.button&#125;&gt; // ... &lt;/View&gt; ); &#125;&#125;const styles = props =&gt; (&#123; button: &#123; backgroundColor: props.disabled ? \"gray\": (props.color ? props.color : \"red\"), &#125;,&#125;);Ficou mais complexo. Simplificando ficaria assim:1234567891011121314151617181920class Button extends React.Component &#123; render() &#123; const &#123; color, disabled &#125; = this.props; const buttonStyle = disabled ? styles.button(&#123; color &#125;) : styles.buttonDisabled; return ( &lt;View style=&#123;buttonStyle&#125;&gt; // ... &lt;/View&gt; ); &#125;&#125;const styles = &#123; button: props =&gt; (&#123; backgroundColor: props.color ? props.color : \"red\", &#125;, buttonDisabled: &#123; backgroundColor: \"gray\", &#125;&#125;);Esses foram exemplos que seguirmos uma linha antes de avaliar bem o projeto, pode ficar muito complexo, independente do caminho escolhido. O melhor caminho é ver na prática e testar as possibilidades que conseguir.ConclusãoTestando as abordagens ao estilo no React native, podemos ver a flexibilidade e também muda a forma como pensamos sobre como os estilos podem ser definidos em aplicações baseadas em componentes JavaScript, não apenas no React Native, mas também na web.Tem muitas bibliotecas para testar:Styled componentsExtended StyleSheets for React NativeFurther - algebraic style composition for functional UIsEntão, vamos testar!","pubDate":"Mon, 05 Feb 2018 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-estilizacao/","category":"react-native"},{"title":"React Native - Tela de abertura e ícone","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-tela-de-abertura-e-icone/","description":"Se está desenvolvendo uma aplicação com React native, você vai querer personalizar o mesmo. Então, vamos ver como colocar a tela inicial e os ícones do aplicativo como queremos.Primeiro temos que criar o nosso projeto.1react-native init helloworldCriando as imagesExistem dispositivos de todas as formas e tamanhos, portanto, nossas imagens de tela inicial também precisam ter uma variedade de tamanhos. O Phonegap tem um guia dos tamanhos de telas e ícones que o seu aplicativo deve ter.Usaremos o Image Gorilla da Ape Tools para gerar todos os tamanhos necessários para a nossa tela inicial. Na ferramenta use uma imagem PNG sem transparência de 2048x2048 para a tela de abertura e uma imagem PNG de 1024x1024 para o ícone. Assim que o processo do Image Gorilla seja concluído, baixe o zio e extraia. Você verá vários diretórios, só estamos interessados ​​nos diretórios Android e IOS.Adicionando no IOSAbra o arquivo ios/helloworld.xcodeproj, com o XCode.Após o processo de indexação, selecione o projeto no menu esquerdo, que será mostrado o conteúdo para a edição. Role para baixo até achar a opção Launch Images Source e clique em Use Asset Catalog....Na caixa de diálogo que aparece clique em Migrate. Em seguida, no campo Launch Screen File, exclua LaunchScreen e deixe o campo em branco. Você também pode excluir o LaunchScreen.xib do navegador à esquerda.Dentro da pasta Imagens.xcassets, existe agora uma opção LaunchImage dentro dela. Aqui é onde vamos arrastar e soltar as imagens IOS geradas.Agora, executando react-native run-ios, já é possível ver a nossa tela de abertura nova e o ícone. Adicionando no AndroidAs próximas dicas tem como base o artigo Splash Screens the Right Way.No Android, primeiro copie os seguintes diretórios das imagens geradas:drawable-hdpidrawable-mdpidrawable-xhdpidrawable-xxhdpie cole no diretório android/app/src/main/res.Abra o projeto no Android Studio (sempre abro o arquivo android/build.gradle, que assim ele já verifica as configurações do gradle). Em app/res/drawable, crie um novo Drawable resource file. Nomeie esse arquivo project_splash.Dentro do arquivo cole o seguinte:123456789// project_splash.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;selector xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item&gt; &lt;bitmap android:gravity=\"fill\" android:src=\"@drawable/screen\"/&gt; &lt;/item&gt;&lt;/selector&gt;A exibição da tela de abertura deve estar pronta imediatamente, mesmo antes de poder inflar um arquivo de layout em sua atividade de splash.Então você não usará um arquivo de layout. Em vez disso, especifique o plano de fundo da tela inicial como o fundo do tema da atividade.Agora precisamos adicionar um novo estilo no arquivo android/app/res/values/styles.xml, resultando no seguinte arquivo.12345678910// styles.xml&lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"&gt; &lt;!-- Customize your theme here. --&gt; &lt;/style&gt; &lt;style name=\"SplashTheme\" parent=\"Theme.AppCompat.NoActionBar\"&gt; &lt;item name=\"android:windowBackground\"&gt;@drawable/project_splash&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt;Agora precisamos fazer algumas atualizações AndroidManifest.xml. Vamos criar uma nova atividade com o nome de .SplashActivity.Basicamente, mude o nome da atividade existente e adicione android:theme=&quot;@style/SplashTheme. Em seguida, crie uma atividade vazia com o nome de .MainActivity. Isso resulta em um arquivo como este.1234567891011121314151617181920212223242526272829303132// AndroidManifest.xml&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.helloworld\" android:versionCode=\"1\" android:versionName=\"1.0\"&gt; &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; &lt;uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/&gt; &lt;uses-sdk android:minSdkVersion=\"16\" android:targetSdkVersion=\"22\" /&gt; &lt;application android:name=\".MainApplication\" android:allowBackup=\"true\" android:label=\"@string/app_name\" android:icon=\"@mipmap/ic_launcher\" android:theme=\"@style/AppTheme\"&gt; &lt;activity android:name=\".SplashActivity\" android:label=\"@string/app_name\" android:theme=\"@style/SplashTheme\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\" /&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=\".MainActivity\" /&gt; &lt;activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\" /&gt; &lt;/application&gt;&lt;/manifest&gt;Observe que movemos todas as configurações de MainActivity para SplashActivity.Agora precisamos dizer ao SplashActivity que vá para o MainActivity, o que representa a nossa aplicação real. Para fazer isso você precisa criar uma nova classe Java chamada SplashActivity.E coloque o seguinte código nesse arquivo. Certifique-se de manter a primeira linha o mesmo que o que for criado para o seu aplicativo, é específico do aplicativo.1234567891011121314151617// SplashActivity.javapackage com.helloworld;import android.content.Intent;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;public class SplashActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); Intent intent = new Intent(this, MainActivity.class); startActivity(intent); finish(); &#125;&#125;Pronto! Temos as telas de abertura no Android. Para o ícone, basta substituir a imagen ic_launcher.png de cada pasta android/app/src/main/res/mipmap-*, com as imagens icon.png que estão nos diretórios respectivos drawable-*, mantendo o nome ic_launcher.png. Ou se preferir altere o arquivo AndroidManifest.xml, o valor de android:icon. Ex: android:icon=&quot;@drawable/icon&quot;.Com tudo isso concluído, você deve ver o seguinte (extremamente brevemente) ao criar o aplicativo. ConclusãoDepois da configuração dos ambientes e a implementação dos ícones e telas de abertura, agora é só focar na aplicação que pretende desenvolver.","pubDate":"Sun, 04 Feb 2018 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-tela-de-abertura-e-icone/","category":"react-native"},{"title":"React Native - Hello World","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-hello-world/","description":"Para ver na prática o React native, vamos para o nosso Hello world. A documentação(Getting Started) explica bem os passos de instalação e para rodar os projetos, mas você também pode ver aqui abaixo e conferir um exemplo em nexus-react-native - hello-world.Pré-requisitosNode - Interpretador de código JavaScript que funciona do lado do servidor.Watchman - Ferramenta do Facebook para observar as alterações no sistema de arquivos. É altamente recomendável que você o instale para um melhor desempenho.Xcode - Ambiente de desenvolvimento integrado e software livre da Apple Inc.JDK - Significa Kit de Desenvolvimento Java, e é um conjunto de utilitários que permitem criar sistemas de software para a plataforma Java.Android Studio - Ambiente de desenvolvimento integrado para desenvolver para a plataforma Android.react-native-cli - Permite instalar a interface do React Native via linha de comando.IOS (Mac)NodeWatchmanXcodeAndroid (Windows/Linux/Mac)NodeWatchmanJava SE Development Kit (JDK)Android StudioAndroid StudioInstalaçãoEscolha uma configuração custom quando solicitado ao selecionar o tipo de instalação. Certifique-se de que esses itens estejam marcados:Android SDKAndroid SDK PlatformPerformance (Intel ® HAXM)Android Virtual DeviceInstalando o Android SDKO Android Studio instala o último SDK do Android por padrão. Uma aplicação React Native, no entanto, requer o SDK do Android 6.0 (Marshmallow) em particular. SDKs Android adicionais podem ser instalados através do SDK Manager no Android Studio.O SDK Manager pode ser acessado em Appearance &amp; Behavior → System Settings → Android SDK.Selecione a guia Plataformas SDK dentro do SDK Manager, em seguida marque a caixa ao lado de Show Package Details no canto inferior direito. Procure e expanda a entrada do Android 6.0 (Marshmallow), então verifique se os seguintes itens estão marcados:Google APIsAndroid SDK Platform 23Intel x86 Atom_64 System ImageGoogle APIs Intel x86 Atom_64 System ImageEm seguida, selecione a guia SDK Tools e marque a caixa ao lado de Show Package Details aqui também. Procure e expanda a entrada Android SDK Build-Tools, então verifique se o 23.0.1 está selecionado.Variáveis de ambiente (Android)Se vai utilizar a plataforma Android, precisa ter algumas variáveis de sistema.No caso do Mac e Linux basta adicionar no arquivo $HOME/.bash_profile:123export ANDROID_HOME=$HOME/Library/Android/sdkexport PATH=$PATH:$ANDROID_HOME/toolsexport PATH=$PATH:$ANDROID_HOME/platform-toolsou se for no Windows, configure a variavel ANDROID_HOME. Veja aqui como configurar uma variavel de ambiente no windows.Criando a aplicaçãoTendo os pré-requisitos instalados e no caso do Android, as variáveis de ambiente configuradas. Agora podemos criar o nosso hello world com o cli do React native.Se ainda não tem o cli instalado, basta instalar pelo npm.1npm install -g react-native-cliAgora basta executar o comando init, com o nome do projeto.1react-native init helloworldRodando a aplicaçãoIOSNo IOS é bem simples, basta entrar na pasta do projeto e executar run-ios.12cd helloworldreact-native run-iosAndroidNo caso do Android, teremos que iniciar um dispositivo Android antes de executar run-android. Podendo ser um dispositivo físico ou você pode usar um dispositivo virtual que permite que você simule um dispositivo Android em seu computador.Usando um dispositivo físico - Se você tem um dispositivo físico, você pode usá-lo para o desenvolvimento no lugar de um AVD conectando-o ao seu computador usando um cabo USB e seguindo as instruções aqui.Usando um dispositivo virtual - Você pode ver a lista de dispositivos virtuais de Android (AVDs) disponíveis abrindo o AVD Manager no Android Studio. Procure um ícone que se pareça com isto: Android Studio AVD Manager - Se você acabou de instalar o Android Studio, provavelmente será necessário criar um novo AVD. Selecione Create Virtual Device, depois escolha qualquer telefone na lista e clique em Next.Com o dispositivo pronto, podemos continuar.12cd helloworldreact-native run-androidConclusãoPode parecer complicado no começo (me refiro ao Android :D). Mas tem uma solução mais rápida com o Create React Native App.É a maneira mais fácil de começar a criar um novo aplicativo React Native. Ele permite que você inicie um projeto sem instalar ou configurar ferramentas - não é necessária nenhuma instalação Xcode ou Android Studio.Precisará do Node instalado e instalar:1npm install -g create-react-native-appE depois:create-react-native-app helloworld cd helloworld npm startInstale o aplicativo do Expo client no seu telefone iOS ou Android e conecte-se à mesma rede sem fio que o seu computador. Usando o aplicativo Expo, analise o código QR do seu terminal para abrir seu projeto.","pubDate":"Sat, 03 Feb 2018 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/react-native-hello-world/","category":"react-native"},{"title":"Começando com React Native","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/comecando-com-react-native/","description":"Na ReactConf 2015, que rolou nos dias 28 e 29 de janeiro de 2015, foi feito o anúncio do React Native. Tendo o seu primeiro release no Github no dia 27 de Março de 2015.Desenvolvimento móvel nativoAntes de tudo, precisamos escolher uma plataforma.A plataforma Android, por ter ferramentas gratuitas já oferece para muitos desenvolvedores que tem pouco dinheiro para investir, uma grande oportunidade.Mesmo que apps android contém 85% do mercado de usuários do planeta. Quando você cria apps iOS baseado-se em compras por meio no aplicativo, você tem como benefício a chance de gerar lucros de até 4 vezes maior do que Android.Temos que olhar as características de cada um..AndroidUtiliza a linguagem Java.Apps Android são baixados com maior frequência e números do que outras plataformas.Para Publicar seu trabalho, é cobrado uma taxa fixa de apenas US$ 25 dólares.Muitos países emergentes estão adotando a desenvolvimento Android como Brasil, índia, África, China dentre outros.Por se tratar de código aberto, você corre risco de sofrer com problemas de Malware.Taxas altas de fragmentação da indústria por conta da grande quantidade de fornecedores e quantidade de aparelhos no mercado.Lucratividade da loja Google Play menor em comparação ao iOS.IOSUtiliza linguagens de programação como Objective-C e Swift.Usuários iOS são normalmente muito leais, significa uma base de usuários ativa e constante.Usuários mais dispostos a gastar dinheiro.Para publicar seu trabalho na plataforma, você terá que gastar cerca de US$ 99 dólares.Seu app passará por um processo rigoroso que pode levar um bom tempo antes de ser aprovado.A concentração desses usuários são de maioria dos EUA, um pouco na China e na Europa.ResultadoSimplesmente a nível de desenvolvimento com uma pessoa, teríamos que escolher um. Pois seria um trabalho dobrado que demandaria muito tempo de aprendizado e desenvolvimento.E a nível de empresa, comparando com um desenvolvimento móvel web, os custos são mais altos no desenvolvimento e manutenção, demandando mais pessoal e tempo para manter os códigos iOS e Android separadamente. E consequentemente, linguagens diferentes em plataformas distintas geram comportamentos.A solução(?)Surgiram os frameworks para desenvolvimento híbrido (ex: Cordova, Xamarin, PhoneGap, Intel XDK, Ionic e Sencha Touch). Eles permitem compilar o mesmo projeto em ambas as plataformas.Esses frameworks utilizam HTML, CSS e JavaScript. Eles operam em cima de uma WebView (página Web simulando uma aplicação nativa).Dessa forma, o desempenho é inferior e a interação gráfica com o usuário pode não ser satisfatória.ArquiteturaNativoAplicação&nbsp;&nbsp;Bibliotecas de terceiros&nbsp;&nbsp;SDK de desenvolvedores, bibliotecas padrão&nbsp;Sistema operacional móvel (IOS, Android, etc...)HíbridoAplicaçãoFramework para desenvolvimento móvel (ex: Cordova)Bibliotecas compatíveis com os FrameworksWebView APIIOS SDKsAndroid SDKsIOSAndroidReact nativeAplicação&nbsp;&nbsp;Bibliotecas de terceiros&nbsp;Pacotes NPM (ex: React)&nbsp;&nbsp;Componentes RN de terceiros&nbsp;React nativeIOS / Android SDKsJS RuntimeIOS / AndroidConclusãoO React native revolucionou, já que o código gerado pelo React pode ser reaproveitado em até 100% entre as plataformas, fazendo com que o custo e duração do projeto caia pela metade.Ele compila o projeto nativamente, aproveitando 100% dos recursos do dispositivo e sistema operacional. O desenvolvedor tem acesso nativamente a toda API.","pubDate":"Fri, 02 Feb 2018 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/react-native/comecando-com-react-native/","category":"react-native"},{"title":"Fluxo e versionamento semântico com Git","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/git/fluxo-e-versionamento-semantico-com-git/","description":"Hoje vou falar sobre algo bem interessante, que deixa o versionamento do nosso código bem organizado. Estão em dia com os assuntos Semantic Version e Git flow? Aposto que já utilizou essas regras, mas não tinha um conhecimento mais profundo sobre o assunto, ou já sempre utilizou seguindo à risca.Já conheço e sigo o Git flow, a um bom tempo. Inclusive um dos meus projetos no github é sobre a documentação do mesmo. Não reinventei a roda, é mais para ter um registro de fácil acesso, para futuras explicações ou consultas.Sobre Semantic Version, o site oficial que está na versão 2.0.0, explica com detalhes as regras.Estudando os conteúdos acima, basta ter uma disciplina inicial para os processos e regras.Tomada de decisõesMuitas perguntas podem surgir na cabeça com algumas situações. Vou ilustrar algumas.1) Digamos que estamos na versão 2.2.0 na branch master. Estamos planejando um novo recurso (feature), então a próxima versão deve se tornar 2.3.0. Em seguida, o cliente relata um bug crítico, forçando-nos a preparar um hotfix. Nós corrigimos o bug e colidimos a versão para 2.2.1. Mas, dados os ‘insights’ obtidos com a correção do bug, agora percebemos que talvez precisamos quebrar a API pública para que a feature funcione da maneira que queremos. E se fizermos isso, não devemos mais colidir com a versão 2.3.0. Em vez disso, devemos mover para a versão 3.0.0.Regra: A alteração de versão ocorre quando nós nos ramificamos do desenvolvimento para o release, ou quando nos ramificamos do master para a branch de hotfix.2) Convenção de nomenclatura na branch de dev. Uma vez que todas as mudanças nas outras branchs devem ser mescladas de volta para dev, acho que a nomeação deve refletir que dev é praticamente sempre a versão mais recente do produto. Por isso, é interessante usar a convenção a.b.c-wip.d, onde wip (work-in-progress) significa trabalho em andamento e d é o número da compilação (build).Regra: Sempre certifique-se de que o número de versão na branch de dev está em sincronia com o número mais recente em qualquer branch de hotfix ou release.Exemplo:A branch de dev estava em 1.2.0-wip.123 quando criamos a branch hotfix (hotfix/1.2.1). Seguindo a última regra, quando nós juntamos de volta a branch de dev, ele é será 1.2.1-wip.x.Esta regra pode ficar complicada quando estamos trabalhando em um hotfix e uma branch de release simultaneamente. Na maioria dos casos, o número de versão da branch de release deve superar a de hotfix. Especialmente porque provavelmente queremos mesclar alterações da hotfix de volta para a branch de release antes de envolvê-lo.3) Convenções de nomenclatura nas branches de release. Eu não espero que os releases permaneçam nesta branch por muito tempo, então o ciclo de vida completo de alpha/beta/rc1/rc2 parece um exagero. No final, podemos usar o rc-prefixo, o que leva à seguinte notação: a.b.c-rc.d. Novamente, d é o número de compilação (build).Vamos continuar com o exemplo. Nós decidimos quebrar a API, então criamos uma nova branch de release (release/2.0.0). A primeira marca nesta branch deve então ser 2.0.0-rc.x, onde x é o número de compilação. Mas o que deveria ser x neste caso? Isso traz a questão sobre quando o contador deve ser redefinido, se alguma vez.Vamos examinar uma alternativa:Alternativa: Redefinir o contador de compilação sempre que o número de versão for colididoJuntamente com o número de versão, isso garante exclusividade. Também parece muito mais agradável, já que o número de compilação raramente atingirá além de três dígitos.No entanto, ele introduz um outro problema: lembrar de redefinir o contador sempre que você alterar o número da versão. Ou, se vamos para a automação completa, como detectar quando o número da versão mudou.Regra: Assegure-se de que cada tag de controle de versão seja exclusivo no repositório.Exemplo passo a passoAtividade do projetoTagO projeto começa, o master está vazio e estamos fazendo o commit do nosso primeiro recurso no desenvolvimento0.0.0-wip.1É feito o commit da tarefa A na branch develop de uma branch feature0.0.0-wip.2Correção rápida de erros diretamente no desenvolvimento0.0.0-wip.3É feito o merge da tarefa B em develop de uma branch feature0.0.0-wip.4Primeiro ‘minor release’! Uma Branch é criada a partir de develop (release/0.1.0) e reseta o contador da compilação0.1.0-rc.1Mais um commit foi necessário0.1.0-rc.2Para manter o desenvolvimento sincronizado, fizemos o merge da branch ‘release’ de volta, criando um commit de mesclagem0.1.0-wip.3Um membro da equipe faz um commit de um recurso C em develop0.1.0-wip.4Release em produção: fizemos o merge de release/0.1.0 em master e develop0.1.0-release.5 0.1.0-wip.6É feito um commit de uma pequena refatoração em develop0.1.0-wip.7Um bug crítico é relatado na produção; Criar uma branch hotfixhotfix/0.1.1 0.1.1-hotfix.1É feito o merge da versão atualizada de volta para develop e assim evitar duplicação de tags (uma vez que o contador tem que ser redefinido)0.1.1-wip.2Enquanto isso, outro commit de refatoração em develop0.1.1-wip.3O hotfix é finalizado0.1.1-hotfix.4A ser feito o merge para master e develop0.1.1-release.5 0.1.1-wip.6É feito o merge de outra branch de feature em develop0.1.1-wip.7Outra minor release. Criaremos a branch release/0.2.0 de develop e resetamos o contador da compilação (build)0.2.0-rc.1ConclusãoPode ficar confuso de início, se não estiver familiarizado com o processo. Mas nada melhor que a prática. Então, crie o seu repositório de testes e comece a praticar. Tendo mais exemplos para ilustrar, estarei atualizando esse artigo ou criando um novo sobre o assunto. Feedbacks e novos cenários, são bem-vindos.","pubDate":"Mon, 21 Nov 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/git/fluxo-e-versionamento-semantico-com-git/","category":"git"},{"title":"O ano que mudou a minha vida","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/personal/o-ano-que-mudou-a-minha-vida/","description":"Há exatamente 1 ano, eu estava partindo para a carreira solo, saindo da empresa que eu estava, para me dedicar aos planos pessoais. Depois de 11 anos de trabalho em algumas áreas e empresas sem férias, estava na hora de tirá-las.Para o artigo não ficar muito extenso, serei o mais direto possível, para explicar o tema desse texto. Então, vamos aos tópicos.Os males do estresseUm grande defeito de algumas pessoas que são Workaholics, como eu, está em se preocupar demais. Se por um lado, algo é muito importante para você, sendo natural que a preocupação seja grande, por outro, precisamos entender que na vida é necessário se ter um equilíbrio e dosagem.Principalmente no trabalho, com prazos curtos, trajeto complicado e falta de harmonia de pensamentos na elaboração de projetos, podem provocar um grande estresse.Tem o artigo lidando com o estresse de programadores, bem legal, que fala sobre estresse e dá algumas dicas para lidar com o assunto.Infelizmente, as vezes só aprendemos, errando. O erro que eu dexei acontecer, foi consentir que o estresse ultrapassasse o limite. Com isso, a qualidade de vida e a motivação foram para o espaço.Cirurgia e recuperaçãoNo dia 16 de junho de 2015, dei entrada no hospital com fortes dores nos rins. Espero que niguém sinta as dores de se ter cálculos renais(Pedras nos rins). Assim, sendo submetido ao procedimento de Ureterorrenolitotripsia. Chega de lembrar, né? :/Tive que conviver com o catéter duplo J, por alguns longos dias. Conseguindo me livrar dele, por volta do dia 15 de julho. Basicamente, o primeiro mês de carreira solo, não foi muito glamuroso. :/Portanto, beba bastante água, não fique só no café. Acredite, estou sendo muito seu amigo, para que não conheça essa dor.Teoria do caosCom base na lei da Teoria do caos, devemos ter cuidado até com os pequenos detalhes. E quando vemos pequenas ou grandes situações, que preferimos ignorar?Muitos meses com o estresse elevado, poucas horas de sono, não bebendo água e mais alguns fatores. O que isso pode resultar?A teoria é simples, mas na prática, nem sempre tratamos como se deveria, o nosso corpo ou mente.Então em julho de 2015, estava no meu pior estado psicológico. No mesmo período estava acontecendo aqueles assaltos com facas no centro da cidade, que foi bem noticiado na TV. Mais um fator que se somou.O resultado foi ter um príncipio(chamo assim, porque não busquei ajuda médica) de síndrome do pânico. Felizmente, só tive uma vez a crise, mas suficiente para repensar algumas opiniões. As vezes não vemos a gravidade desses assuntos que envolvem nossa mente.Após esse evento, foi difícil sair de casa, demorou algumas semanas e até meses para isso. Você não ter controle do que quer fazer, é punk. Não façam como eu fiz, nessas situações, procurem ajuda.Momento decisivoO que eu amo fazer se tornou algo muito estressante, que é mexer com o desenvolvimento web. Então, tomei a decisão de largar isso e começar a pensar em outra área. Não via outra saída, já que continuar na mesma área, despertava um estresse por acumulação.Alguns amigos tentaram fazer com que eu mudasse de ideia. Em todo esse período só fiz um freelance, usando AngulaJS, a convite do meu amigo Allan Batista. Ao final do mesmo, vi que não conseguia separar estresse de desenvolvimento. Assim, saindo de algumas sociedades e recusando trabalhos.Esse foi o ponto zero, se não me engano, foi no meio do mês de setembro. Assim, depois de muito refletir, tinha que tomar uma decisão. Decidi que iria continuar na área, mas tinha que resolver a questão do estresse.Um novo capítuloDecidido a continuar fazendo o que gosto, comecei a me dedicar aos projetos de código aberto e a escrever mais artigos para o meu blog.Em outubro, viajei para Argentina e Foz do Iguaçu. Como ainda estava no início do processo de equilíbrio, não aproveitei 100%, mas foi bem bacana, conheci as Cataratas dos dois lados e outros lugares.Para me ajudar também, fiz alguns projetos para ajudar amigos. Fazendo desde layouts no photoshop(tenho um pé no design) até a programação.Como tinha um dinheiro guardado, pude me dar ao “luxo” de tirar todo esse tempo para mim, não fazendo freelas ou trabalhando.Outra coisa que me ajudou bastante, foi começar a reforma da minha casa. Assim, com todos esses objetivos, começou um novo capítulo na minha vida.ProjetosAté o final de 2015, o estresse ainda estava muito presente, mas seguia com os meus planos. A reforma da casa, teve o seu fim de fato, no começo de abril desse ano. Já posso colocar no curriculo: Pedreiro, pintor e decorador . :) :pAlgumas dezenas de artigos escritos, dezenas de repositórios criados, ajudei alguns amigos, muito estudo e código desenvolvido. Acredito que isso resume o que foi feito no meu último ano.Coloquei a Descco(atual nerdcalistenico.github.io), como o meu site principal. Sendo uma ideia que tive em 2011, que significa Desenvolvimento Estratégico e Criativo da Comunicação. Não é uma empresa ou algo que tenha fins lucrativos. Simplesmente, queria criar um grupo, pois gosto de falar e mexer com outras coisas que não são da área web. Então, não fazia sentido colocar no meu blog, senão iria ficar muito confuso.Além desse blog, também tenho o IMHO Movies, que dou a minha opinião sobre filmes que vejo, principalmente no cinema. Gosto muito de filmes e IMHO(In My Humble Opinion), traduzindo seria Em minha humilde opinião.Tenho outros blogs, mas esses são os principais que dou mais atenção. E a Descco, só existe para reunir meus blogs e projetos de código aberto. Nenhuma pretensão de virar empresa ou algo do tipo.Digamos que sou bem ligado em organização, por isso criei toda essa estrutura. No link, você pode ver a minha separação para os meus repositórios no Github, com uma breve descrição. Gosto de seguir o estilo de cada coisa em seu lugar. #organizacaoQual foi a mudança?Primeiramente, na forma de pensar e ter mais certeza de dosar as coisas. Acredito que a maioria das pessoas conhecem a teoria da qualidade de vida, mas praticar é outra história. Principalmente quem é muito novo, nem pensa nisso. Mas devemos nos preocupar. Desenvolvedor gosta de café? Sim, mas também deixe uma garrafa de água do lado e beba. :)O trabalho está corrido e prazos complicados? Se isso for constante e não há mudanças, comece a criar novas opções.Você gosta muito de trabalhar com o que gosta? Se sim, por mais que seja bom, é preciso ter equilíbrio. Tenha boas noites de sono, se desligue do trabalho nos momentos de lazer. Isso te ajuda a ser eficaz e até mais eficiente no trabalho, do que o contrário.Fora a forma de pensar e experiência adquirida, ter o meu Dojo particular(Github), me trouxe muita satisfação.Você trabalha em uma empresa por alguns anos, e por N motivos você sai da empresa. E seu código e experiência em alguns casos, só ficam em sua memória. Isso era uma insatisfação que eu tinha. Olhar para trás e só ter lembranças, mas nada registrado em algum lugar ou algo do tipo. É claro, sendo feito dentro da empresa, tem que ficar só dentro da empresa.Porque não comecei com esses projetos paralelos antes? Por falta de cultura para fazer o mesmo. As vezes mesmo sabendo que é uma boa prática, acabamos deixando de lado por outras prioridades. E em sua maioria, o motivo é o trabalho principal.A analogiaO que é uma empresa para você? O que é uma mãe para você? Apenas refletindo sobre essas duas perguntas, você terá uma analogia muito boa.Uma boa mãe te cria para o mundo, e uma boa empresa faz o mesmo. Em ambos os casos, existe o apoio e o fornecimento de recursos para o seu crescimento, tanto no pessoal, quanto no profissional.Então, ter projetos paralelos ou um lugar que não seja ligado a sua empresa atual, não quer dizer que está querendo se desligar ou algo do tipo.Temos em várias empresas, o Hackathon, que é um evento onde os programadores se reúnem, para passar horas direto programando e trazendo novas ideias. Que é uma coisa muito legal e os projetos podem ou não, serem utilizados pela empresa que organiza.Nem todas as ideias que os desenvolvedores tem, chega no nível de um evento desses ou ainda não estão maduras o suficiente na cabeça. Para isso temos o Github, onde podemos ter colaborações ou apenas criar um projeto e manter sozinho(a).Voltando a analogia, um funcionário ou um filho, normalmente tem uma sede de conhecimento e tem aquela vontade de mudar o mundo. Então, você tem uma pessoa que cria várias coisas, estuda e ainda faz bem os seus deveres. Que mal tem?Acredito que a única questão na analogia, é que uma hora você não vai morar mais com a sua mãe e em uma empresa você pode ficar até se aposentar. Nessas situações, cada caso é um caso, não precisamos entrar nesse detalhe.As demais semelhanças vou deixar que você pense e reflita, para o tópico não ficar muito extenso. Mas só queria dizer que é uma via de mão dupla. A empresa apoia e dá recursos para o funcionário, e o mesmo evolui e entrega um bom trabalho. Assim, os dois crescem juntos. Se a parceria não for para sempre, mesmo assim os papéis foram cumpridos.Considerações finaisAs vezes em uma empresa, ficamos meses em um projeto. Se não tivermos o pensamento de pequenos projetos paralelos, que podem ser estudos ou até mesmo escrever um artigo, podemos ficar bem desatualizados.A organização que fiz no meu Github e os blogs, me trouxeram uma grande satisfação. Pra sempre terei os meus registros. Estando em uma empresa, posso levar essa experiência dos estudos que fiz e faço. Ao mesmo tempo que estarei focado nos projetos da empresa, poderei continuar atualizado e praticando. E isso é bom para a empresa e para mim. Imagina que você fica 1 ano só em um projeto grande que só usa AngularJS e foca 100% nisso. No próximo projeto, você precisa usar só ReactJS. E aí? Você pode dizer, que pelo menos ficou especialista em AngularJS? Respondo com esse link e cito uma conversa do Suissa:Suissa qual framework eu devo estudar agora: Angular ou React? (só lembrando que React, é uma biblioteca) – DesconhecidoTodos. – SuissaMas assim eu não vou ser especialista em nenhum! – DesconhecidoQUE ÓTIMO! Ninguém deveria ser especialista de framework, frameworks são todos iguais: entregam uma arquitetura pronta, por mais “livre” que seja. – SuissaVou deixar alguns links que talvez não tenha relação direta com o artigo, mas são bem interessantes:Você Conhece A Parábola Da Demissão Da Formiga Desmotivada?Não vale a pena contar pra ninguém os seus planosE esse vídeo com o Filipe, que faz uma analogia bem legal, fala sobre código limpo e o que fazer quando as coisas não vão bem:Clean Code: 2 O que é código limpo?ConclusãoUm ano passa rápido, acredito só ter dedicado menos da metade desse tempo, para os projetos do Github e blogs.Estamos iniciando o mês de julho, desde o mês passado comecei a buscar uma vaga para me realocar no mercado. Não vou dizer em que pé estou, mas espero ter boas notícias em breve.Posso dizer que o amor voltou, e depois de todo esse processo. Desenvolvimento web, será a minha paixão pra sempre. Quem quiser me ajudar em projetos ou quiser que eu ajude, pode falar. Vamos trocar conhecimento, que isso é o mais importante.Recentemente pediram para me definir em uma palavra, e me veio o verbo aprender. Se está desmotivado(a), busque aquela criança que está dentro de você, que quer mudar o mundo. Sei que estou motivado, quando a primeira palavra que vem a minha cabeça é aprender.Para finalizar, a dica que deixo é se mostre. Crie seu portfólio, participe de eventos, ajude os seus companheiros dos grupos, crie seus projetos e busque fazer o melhor na sua empresa ou onde estiver. Fazer algumas dessas coisas, não quer dizer que está buscando uma nova empresa.Você aprende se mostrando, trocando ideias e ensinando. E na maioria das empresas, se tem o contrato de confidencialidade ou dezenas de pessoas mexendo no mesmo projeto. Assim, você não pode ter ajuda ou trocar ideias com um pessoal do Japão por exemplo, sobre um módulo sensacional que criou e nem disponibilizar para ajudar outras pessoas. (só um exemplo exagerado, mas você entendeu..) :)Agora, vamos programar!!! :) :p","pubDate":"Fri, 01 Jul 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/personal/o-ano-que-mudou-a-minha-vida/","category":"personal"},{"title":"Criando um guia de estilo para a interface","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/ui/criando-um-guia-de-estilo-para-a-interface/","description":"Independente da área de atuação, é muito importante a organização. E na área web, mais especificamente no setor de design, a criação do guia de estilo é muito importante. Infelizmente, mesmo com os benefícios, muitos não começam ou cumprem essa etapa.Vamos nos colocar no cenário em que temos um projeto web, independente do tamanho do mesmo. Existindo um guia de estilo, além de facilitar o trabalho posterior do designer, já deixa um padrão pronto para o desenvolvedor front-end.Partiremos de dois pontos de vista, simples.Primeiro caso: O designer entrega 30 telas para o desenvolvedor front-end. O mesmo tem que olhar todas as telas, achar padrões, descobrir todas as cores, tamanhos e avaliar o que é específico ou não.Segundo caso: O designer entrega 30 telas e 1 guia de estilo para o desenvolvedor front-end. O mesmo só precisa olhar as telas por questão de conferência e precisa apenas seguir o guia de estilo, com os padrões do projeto.De início, você pode pensar que todo o trabalho e a responsabilidade vai ficar com o designer, e o desenvolvedor front-end não terá trabalho. Errado, ele terá menos trabalho desnecessário. Afinal, quando você vai no restaurante e vai pedir um prato, você diz: - Me vê o terceiro prato da lista de almoço executivo. (E o garçom tem que olhar o cardápio para ver qual é) … Não !!!Essa prática é necessária para que se tenha padrões na etapa de desenvolvimento. Agilizando o processo de atualização e manutenção do projeto. O designer terá o projeto centralizado, de fácil visualização e consulta. Assim, tendo menos trabalho na etapa de alterações e mudança completa do projeto, tendo padrões estabelecidos.Para a etapa do desenvolvimento front-end, o trabalho desnecessário não existirá mais. O foco poderá ser dado para a criação dos padrões na área de desenvolvimento, que trará os mesmos benefícios citados acima com relação a área de design.Exemplo práticoVamos supor que o designer inseriu um padrão para o título de cada página no guia de estilo. Vou exemplificar com a etapa do front-end.123456789101112131415161718192021222324// Utilizando o pré-processador SASS, com a sintaxe SCSS$base-font-family: Arial;$font-size-large: 24px;$font-size-regular: 18px;$color-typography-primary: #1c1e36;.title &#123; color: $color-typography-primary; font-family: $base-font-family; font-size: $font-size-large; font-weight: 700;&#125;.subtitle &#123; color: $color-typography-primary; font-family: $base-font-family; font-size: $font-size-large;&#125;.text &#123; color: $color-typography-primary; font-family: $base-font-family; font-size: $font-size-regular;&#125;Um exemplo bem simples, mas é para demonstrar que um guia de estilo bem estruturado, influência nos padrões criados na etapa de desenvolvimento. Não é preciso saber o que acontece no código acima e a princípio não vou entrar nesse assunto. Apenas compare com o código abaixo:1234567891011121314.title &#123; color: #1c1e36; font-size: 24px;&#125;.widget-title &#123; color: #1f213a; font-size: 23px;&#125;.text &#123; color: #1c1e35; font-size: 18px;&#125;Calma!! Peço desculpas. Os pontos principais, não ficaram claros.A diferença mais notável é que antes usava variáveis, para centralizar o código e a manutenção ser mais prática. E o uso das mesmas vem do planejamento do desenvolvedor, as regras de negócio do projeto e o guia de estilo.O ponto que quis mostrar, é que mesmo centralizando o código, se não tem um guia de estilo, não faz efeito. As cores acima, tem um tom bem próximo um do outro. Será necessário ser criado uma variável para cada, então por isso na definição do guia de estilo, algumas coisas tem que ter uma avaliação se são viáveis. Como é o caso da fonte, onde se tem a diferença de 1 pixel. Isso vendo em pequena escala, parece ser uma coisa que se contorna facilmente, mas em grande escala, pode ser um grande problema. Principalmente, se não há muita comunicação entre a equipe de design e front-end.Teremos mais casos na sequência de artigos, que irão ilustrar melhor. Um caso em que se torna indispensável o uso de um guia de estilo é em um projeto que trabalha com mais de 1 tema. Mesmo para mim, sendo sempre indispensável.O maior problema já é resolvido na etapa de design. Com o designer criando padrões, não veremos layout como base em números 12.233 ou 201.17, por exemplo. Você pode chegar para o desenvovledor, falar para desconsiderar e que pode arredondar. Acredite, pode dar problema. #pixelPerfectVamos pensar em um projeto com boxes idênticos visualmente, mas com medidas diferentes e você não tem contato com o designer. Com o tempo de desenvolvimento curto e o layout já foi aprovado. Levanta a mão quem já pegou um projeto assim? \\o/ConclusãoEssa foi uma pequena introdução para alertar sobre um dos problemas que dificultam o processo de um projeto web. Padrões salvam vidas. :) …Pode parecer que é algo óbvio, mas vejo em muitos lugares que essa etapa não tem o seu valor reconhecido. E tenho uma opinião radical, de que se começa errado, termina da mesma forma. Afinal, refazer é mais fácil que fazer? Isso sim, tem uma resposta óbvia.Nos próximos artigos sobre o assunto, será mais trabalhado os detalhes sobre a importância e como compor um guia de estilo.","pubDate":"Wed, 20 Apr 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/ui/criando-um-guia-de-estilo-para-a-interface/","category":"ui"},{"title":"Começando com SASS","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/css/comecando-com-sass/","description":"Sass (Syntactically Awesome Stylesheets) é um pré-prcessador de CSS, onde podemos definir variáveis ​​e reutilizá-las para um projeto inteiro. Você também pode gerar classes e reutilizar trechos de código com “mixins” ou “estender” suas classes com propriedades usadas anteriormente. Todos estes são análogos às funções em linguagens de programação, pois podemos aplicar os conceitos de programação orientada a objetos.Sass consiste em duas sintaxes. A sintaxe original (.sass), chamado de sintaxe de indentação, usa uma sintaxe semelhante ao Haml. Ele usa indentação para bloco de código separados e caracteres de nova linha para separar regras. A sintaxe (.scss), usa bloco de formatação CSS, usando chaves para denotar blocos de código e ponto e vírgula após os valores das propriedades.12345678910111213141516// SASS$font-stack: Helvetica, sans-serif$primary-color: #333body font: 100% $font-stack color: $primary-color// SCSS$font-stack: Helvetica, sans-serif;$primary-color: #333;body &#123; font: 100% $font-stack; color: $primary-color;&#125;Particularmente eu prefiro a sintaxe (.scss), por ser mais próximo da sintaxe CSS.InstalaçãoPara utilizar o SASS, você precisa ter o Ruby, instalado na máquina. O site do SASS, mostra 2 formas de instalação do mesmo.Praticamente sempre uso a forma, utilizando o terminal:1gem install sassPara verificarmos se o mesmo está instalando, podemos conferir com o comando:1sass -vUtilizaçãoApós a instalação, se tem várias formas para rodar o pré-processador. Você pode usar um software como o Koala, usar um automatizador de tarefas como Grunt (grunt-sass) ou Gulp (gulp-sass), ou o próprio terminal.Como exemplo, podemos usar o terminal:*watch * - flag para que sempre quando tenha alteração dos arquivos .scss que estão sendo observados, seja gerado o cssstyle.scss - [caminho da pasta dos arquivos scss ou caminho + nome especifico do arquivo a ser observado]style.css - [caminho da pasta de destino ou caminho + nome especifico do arquivo a ser gerado]1234// sass --watch source/// sass --watch source/style.scss// sass --watch source/:dist/ sass --watch style.scss:style.cssUm ponto importante ao se observar uma pasta, é com relação aos arquivos que serão gerados. Digamos que na pasta source/, temos 3 arquivos e queremos que apenas 2 sejam gerados. Resolvemos isso com o prefixo _(undescore).123// _variables.scss// styleguide.scss// style.scssNos arquivos que estão sendo observados, importamos o arquivo de variáveis.123// styleguide.scss// style.scss@import \"_variables\";VariáveisTodas as variáveis devem ser definidas usando um prefixo $.123456789// SASS$color-alpha: rgba(0,0,0,0.8)$color-typography-primary: #ffffff$font-size-large: 32px.title background: $color-alpha color: $color-typography-primary font-size: $font-size-large12345678910// SCSS$color-alpha: rgba(0,0,0,0.8);$color-typography-primary: #ffffff;$font-size-large: 32px;.title &#123; background: $color-alpha; color: $color-typography-primary; font-size: $font-size-large;&#125;123456/* CSS */.title &#123; background: rgba(0,0,0,0.8); color: #ffffff; font-size: 32px;&#125;Seletores aninhadosCom o Sass, você pode aninhar os seus seletores CSS, evitando a repetição de escrita. Mas cuidado, não podemos exagerar nos níveis, senão a manutenção fica inviável.1234567891011// SCSS// Não faça isso !!!!ul &#123; li &#123; .link &#123; .text &#123; color : red; &#125; &#125; &#125;&#125;1234// CSSul li .link .text &#123; color: red;&#125;Vamos para a boa prática e também utilizar o caractere &amp;, que representa o seletor pai.123456789101112131415161718192021222324// SCSS.link &#123; color: blue; &amp;:hover &#123; color: yellow; &#125; &amp;:before &#123; border-left: 10px solid transparent; border-right: 10px solid transparent; border-top: 10px solid #f00; content: \"\"; display: inline-block; height: 0; width: 0; &#125;&#125;.widget &#123; .link &#123; background: #a1a1a1; &#125;&#125;12345678910111213141516171819// SASS.link color: blue &amp;:hover color: yellow &amp;:before border-left: 10px solid transparent border-right: 10px solid transparent border-top: 10px solid #f00 content: \"\" display: inline-block height: 0 width: 0.widget .link background: #a1a1a11234567891011121314151617181920/* CSS */.link &#123; color: blue;&#125;.link:hover &#123; color: yellow;&#125;.link:before &#123; border-left: 10px solid transparent; border-right: 10px solid transparent; border-top: 10px solid #f00; content: \"\"; display: inline-block; height: 0; width: 0;&#125;.widget .link &#123; background: #a1a1a1;&#125;MixinsOs mixins permitem que você reutilize propriedades CSS e seletores. No SCSS, precisamos definir o @mixin e atribuir um nome. Depois, podemos acrescentar algumas propriedades, criar uma classe ou elemento e utilizar com @include. Na sintaxe original, é um pouco diferente e podemos comparar abaixo:123456789// SASS=border-radius($radius) -webkit-border-radius: $radius -moz-border-radius: $radius -ms-border-radius: $radius border-radius: $radius.box +border-radius(10px)123456789// SCSS@mixin border-radius($radius) &#123; -webkit-border-radius: $radius; -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius: $radius;&#125;.box &#123; @include border-radius(10px); &#125;1234567/* CSS */.box &#123; -webkit-border-radius: 10px; -moz-border-radius: 10px; -ms-border-radius: 10px; border-radius: 10px;&#125;FunçõesSemelhante a um mixin, as funções permitem parâmetros, mas não retornam trechos de código e sim um valor.1234567891011// SCSS$total-width : 100%;$total-columns : 12;@function x-gridsystem-width($columns) &#123; @return ($total-width / $total-columns) * $columns;&#125;.box &#123; width: x-gridsystem-width(6);&#125;123456789// SASS$total-width: 100%$total-columns: 12@function x-gridsystem-width($columns) @return ($total-width / $total-columns) * $columns.box width: x-gridsystem-width(6)1234/* CSS */.box &#123; width: 50%;&#125;ExtendCom SASS você pode fazer com que um selector herde os estilos de outro, sem duplicar as propriedades CSS. Tenha em mente que se você tem muitas propriedades duplicadas, você poderá enfrentar problemas de desempenho. Este recurso permite que você herde qualquer estilo já utilizado em qualquer classe anterior.Vamos dizer que eu quero usar as propriedades de “.message” em “.success” e “.error”. Para atingir este objetivo é necessário criar “.success” , “.error” e acrescentar “@extend .message”.12345678910111213// SASS.message border: 1px solid #ccc padding: 10px color: #333.success @extend .message border-color: green.error @extend .message border-color: red12345678910111213141516// SCSS.message &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;.success &#123; @extend .message; border-color: green;&#125;.error &#123; @extend .message; border-color: red;&#125;1234567891011121314/* CSS */.message, .success, .error, &#123; border: 1px solid #cccccc; padding: 10px; color: #333;&#125;.success &#123; border-color: green;&#125;.error &#123; border-color: red;&#125;PlaceholdersO placeholder é semelhante ao @extend, com a diferença que ele funciona como uma variável (Se não for utilizado, não aparece no CSS final).12345678910111213// SASS%message border: 1px solid #ccc padding: 10px color: #333.success @extend %message border-color: green.error @extend %message border-color: red12345678910111213141516// SCSS%message &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;.success &#123; @extend %message; border-color: green;&#125;.error &#123; @extend %message; border-color: red;&#125;1234567891011121314/* CSS */.success, .error &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;.success &#123; border-color: green;&#125;.error &#123; border-color: red;&#125;ConclusãoO CSS é muito importante para um projeto web. E é muito importante ter um pré-processador para organizar, reutilizar código e facilitar muito na manutenção. O SASS oferece muitos recursos e não vejo desvantagens, sendo comparado ao se escrever com apenas em CSS puro. Temos outros pré-processadores no mercado, e veremos em outros artigos.","pubDate":"Wed, 16 Mar 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/css/comecando-com-sass/","category":"css"},{"title":"Começando com Wordpress","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/php/comecando-com-wordpress/","description":"O WordPress é um CMS(Content Management System), open source escrito em PHP e utiliza o banco de dados MySQL. O mesmo é o sucessor do b2/cafelog, criado por Michel Valdrighi, que foi lançado em 2001. Em 2002, o desenvolvimento do b2, se encerrou. E em 2003, um calouro universitário decidiu criar um fork do projeto. Matthew Mullenweg Charles, juntamente com Mike Little, começaram a criar o WordPress a partir do código do b2.Pré-requisitosPHP 5.6 ou superiorMySQL 5.6 ou superiorMódulo Apache mod_rewrite, ativoInstalaçãoO download da versão estável pode ser feito no site oficial. Apos o download, basta extrair o .zip no seu servidor.ConfiguraçãoPrimeiramente, você precisa criar um banco de dados Mysql e atribuir a um usuário as permissões necessárias. Agora é hora de navegar para o seu site para começar com o processo de instalação.Você precisará informar algumas informações, como :Nome do banco de dadosNome do usuário do bancoSenha do bancoServidor do banco de dadosPrefixo utilizado na criação das tabelasO nome do banco de dados, usuário e senha, você já saberá se fez o primeiro passo informado para a configuração. O servidor, dificilmente precisará ser alterado, podendo manter o valor localhost. Quanto aos prefixos das tabelas, só terá a necessidade de ser alterado, caso tenha múltiplas instalações com o Wordpress no mesmo banco de dados.Após preencher essas informações no formulário apresentado, basta submeter. Esses dados serão armazenados no arquivo wp-config.php, que estará na raiz do projeto. Caso queira fazer esse passo manualmente, basta renomear ou duplicar o arquivo wp-config-sample.php, que se encontra na raiz do projeto. Dentro do arquivo encontraremos:1234567891011121314define('DB_NAME', '[nome_do_banco_de_dados]');/** Usuário do banco de dados MySQL */define('DB_USER', '[nome_de_usuario]');/** Senha do banco de dados MySQL */define('DB_PASSWORD', '[senha]');/** nome do host do MySQL */define('DB_HOST', 'localhost');// ...$table_prefix = 'wp_';O importante é que se tenha o arquivo wp-config, preenchido na raiz do projeto, para que seja identificado a instalação.Preenchendo as informações do banco de dados pelo navegador ou manualmente, logo após teremos o passo de preencher as informações básicas para o painel de controle. Esse passo, será feito pelo navegador. Informaremos o nome do site e os dados para a criação de um usuário para acessar o painel de controle do WordPress.Assim, temos uma instalação completa. Podemos fazer o login, para acessar o painel ou ver o site carregado com o tema padrão.sEstrutura de pastaswp-admin./ - Contém os arquivos(PHP) do paindel de controle e normalmente não são alterados por usuários ou desenvolvedoreswp-content/ - Contém os seus temas, plugins e conteúdo carregados e alterados quando você adicionar mídia, plugins e temaslanguages/plugins/themes/upgrade/uploads/wp-includes/ - Contém arquivos(PHP) do núcleo do WordPress e normalmente também não são alterados por usuários ou desenvolvedores…ConclusãoO WordPress é uma boa ferramenta para criação de blogs, para usuários sem muito conhecimento de desenvolvimento web e desenvolvedores experientes. Poupando tempo para criação de um painel de controle. Nos próximos artigos veremos mais sobre seus recursos.","pubDate":"Mon, 22 Feb 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/php/comecando-com-wordpress/","category":"php"},{"title":"Começando com MongoDB","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/database/comecando-com-mongodb/","description":"O MongoDB é um tipo de banco de dados orientado a documentos, em vez de registros estritamente definidos e relacionamentos. Esse tipo de banco de dados foi apelidado de NoSQL(Not Only SQL). Um documento no MongoDb, agrupa objetos em coleções. Você pode pensar em uma coleção como uma tabela como você criaria em um banco relacional, mas a diferença é que não será forçado a definir um esquema para que possa armazenar alguma coisa.Você pode incorporar um documento dentro de outro, o que é muito útil para os casos em que há uma relação de um para um. Em um típico banco de dados relacional, você precisa criar duas tabelas e ligá-los em conjunto com uma chave estrangeira para conseguir o mesmo resultado. NoSQL não suporta joins, mas se você organizar os dados corretamente, então você vai achar que você não precisa de um join.Vale a pena mencionar o objetivo do MongoDB e do NoSQL não é acabar com o banco relacional. Bancos relacionais ainda são uma solução muito boa para a maioria das necessidades do mundo do desenvolvimento. Mas eles tem os seus pontos fracos, mais notadamente a necessidade de definir um esquema rígido para os seus dados, que o NoSQL tenta resolver.O MongoDB tem como característica ser open source, possuir alta performance, não possuir esquemas, ser escrito em C++, multiplataforma e ser formado por um conjunto de aplicativos JSON. O mesmo foi concluído em 2009 lançando assim a primeira versão do MongoDB.Comparação dos conceitos em SQL e MongoDB:SQLMongoDBBanco de dados (database)Banco de dados (database)Tabela (table)Coleção (colection)Linha (row)documento ou documento BSONColuna (column)Campo (field)índice (index)índice (index)Table joinsdocumentos embutidos e linkadosChave Primária (primary key)Chave Primária (primary key)InstalaçãoPara instalar o MongoDB precisamos fazer o download no site oficial.Para mais detalhes sobre a instalação para as plaaformas, você pode ver nos links abaixo:WindowsOS XLinuxÉ necessário que esteja adicionado o caminho da pasta bin do mesmo no Path do sistema. Se não já estiver adicionado, pode fazê-lo pela interface do sistema operacional ou pelo comando:12# ex: C:\\Program Files\\MongoDB\\Server\\3.2\\bin no windowsexport PATH=\"$PATH:[caminho onde foi instalado]/bin\"Com isso, podemos usar o comando mongod de qualquer lugar. O mesmo é usado para iniciar o servidor do MongoDB. Por default o MongoDB armazena seus bancos de dados no diretório /data/db (Linux e OS X) e C:\\data\\db (Windows). No Windows, C: é a unidade onde está executando o comando, se estiver por exemplo usando uma outra unidade como E:, a pasta deverá estar na mesma. Portanto, se iniciar o servidor do MongoDB e não tiver essa pasta, terá um erro no terminal.Se você quiser usar outra pasta, basta usar a flag dbpath, ao inciar o servidor:12# ex: mongod -dbpath=/home/hemersonvianna/mongodbmongod -dbpath=[caminho da pasta]UtilizaçãoAlém de iniciar o servidor como o comando mongod, também temos o comando mongo, para termos acesso ao shell. Ao iniciar o servidor, por padrão o mongo procura por uma base de dados na porta 27107, no seu localhost.Ao iniciar o shell, por padrão ele utilizará o banco test:123$ mongoMongoDB shell version: 3.2.4connecting to: testPara selecionar ou criar uma base de dados, basta usar o comando use [nome_da_base]. Sempre que precisar checar em qual base está trabalhando, basta usar o comando db. Já para checar quais são as bases existentes, utilize o comando show dbs ou show databases.InserindoPara que a base seja criada com o comando use, é necessário utilizar o comando INSERT:12345use myTest#switched to db myTestuser = &#123; name : 'Hemerson Vianna', description: 'Testando' &#125;db.users.insert(user)#WriteResult(&#123; \"nInserted\" : 1 &#125;)O mesmo também pode ser feito com o comando SAVE:12345use myTest#switched to db myTestuser = &#123; name : 'Hemerson Vianna', description: 'Testando' &#125;db.users.save(user)#WriteResult(&#123; \"nInserted\" : 1 &#125;)Usamos o objeto db, que aponta para o banco de dados atualmente selecionado. Incluindo o documento user dentro da coleção usersA diferença entre insert e save.O comando insert apenas insere um documento. O comando save insere um documento, mas se o registro já tiver um _id, o comando faz a função de atualização.ConsultandoPodemos consultar o que foi inserido com o comando find e podemos usar um filtro com o mesmo.1234567891011121314151617# O mesmo que SELECT * FROM listdb.list.find()# &#123; \"_id\" : ObjectId(\"571f6bdd891bf653d4cc709d\"), \"name\" : \"Hemerson Vianna\", \"description\" : \"Testando\" &#125;# Com filtro# O mesmo que SELECT * FROM list WHERE name=\"Hemerson Vianna\"db.list.find(&#123;\"name\": \"Hemerson Vianna\"&#125;)# &#123; \"_id\" : ObjectId(\"571f6bdd891bf653d4cc709d\"), \"name\" : \"Hemerson Vianna\", \"description\" : \"Testando\" &#125;# Especificando os campos# O campo _id vem por padrão# O mesmo que SELECT _id, name FROM listdb.list.find(&#123;&#125;,&#123;\"name\": 1&#125;)# Removendo o campo _id# O mesmo que SELECT name FROM listdb.list.find(&#123;&#125;,&#123;\"name\": 1, \"_id\": 0&#125;)Acrescentando o método pretty(), podemos exibir os resultados de um modo mais apresentável.1db.list.find().pretty()Além do método find() há também o método findOne(), que retorna apenas o primeiro resultado da consulta.1db.list.findOne(&#123;\"description\": \"Testando\"&#125;)Operadores de comparação:equal - $eq é o mesmo que ==greather - $gt é o mesmo que &gt;greather than equal - $gte é o mesmo que &gt;=less than - $lt é o mesmo que &lt;less than equal - $lte é o mesmo que &lt;=not equal - $ne é o mesmo que !=in - $in é o mesmo que IN()not in - $nin é o mesmo que NOT IN()Operadores lógicos:or - $or é o mesmo que ORand - $and é o mesmo que ANDnot - $not é o mesmo que NOTnor - $nor é o mesmo que NORExemplos:123db.users.find(&#123;\"age\":&#123;\"gte\":29, \"lte\":31&#125;&#125;);db.users.find(&#123;\"name\":&#123;\"ne\":\"Hemerson Vianna\"&#125;&#125;);AtualizandoVocê pode usar os métodos update() e save() para atualizar documentos dentro da coleção. Sendo que, o método update() atualiza valores em um documento existente, enquanto o método save() substitui o documento existente em si pelo documento passado dentro do método save().12# Updatedb.list.update(&#123;name: \"Hemerson Vianna\"&#125;, &#123;$set: &#123;description: \"Testando 2\"&#125;&#125;)Se não utilizar o $set todos os dados do usuário como, nome e descrição, serão substituidos pela descrição “Testando 2”, ou seja, o $set faz com que seja mantido todos os dados, e alterado apenas a descrição.12# savedb.list.save(&#123;\"_id\" : ObjectId(\"571f6bdd891bf653d4cc709d\"), description: \"Testando 2\"&#125;&#125;)RemovendoO método remove() é usado para remover um documento da coleção. Este método permite 2 parâmetros. O primeiro é o critério de exclusão e o segundo é a flag justOne. Se a flag estiver setada como true ou 1, o método removerá apenas um documento.12345# Remove o registro com o valor informadodb.list.remove(&#123;name: \"Hemerson Vianna\"&#125;)# Remove todos os dados da coleção listdb.list.remove()Mais alguns comandosshow collections - mostra as coleções do bancodb.createCollection(“[nome da coleção]”) - cria uma coleçãodb.[coleção].drop() - deleta a coleçãodb.dropDatabase() - deleta o banco atualConclusãoQuerendo conhecer mais sobre um banco NoSQL, o MongoDB é uma das melhores opções. Nos próximos artigos, entraremos mais no assunto.","pubDate":"Mon, 15 Feb 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/database/comecando-com-mongodb/","category":"database"},{"title":"Começando com Laravel","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/php/comecando-com-laravel/","description":"De acordo com Taylor Otwell (criador), Laravel foi lançado em junho de 2011, simplesmente para resolver a falta de funcionalidades com o framework CodeIgniter. Que na época, era bem conhecido pela sua simplicidade e e documentação abrangente.Laravel se trata de um Framework PHP, que utiliza o padrão MVC. Vem com muitos recursos e é construído em muitos padrões, ajudando no desenvolvimento de aplicações seguras e performáticas de forma rápida. Possui algumas características que motivam na sua utilização como: facilidade de roteamento, arquitetura modular alimentado por Composer, comunidade ativa e solidária, boa dicumentação, sistema de templates (Blade), Artisan (CLI “Command Language Interpreter” do Laravel) e mais.InstalaçãoPré-requisitos:PHP &gt;= 5.5.9OpenSSL PHP ExtensionPDO PHP ExtensionMbstring PHP ExtensionPHP ExtensionComposerO composer é um controlador de dependências e você pode fazer a instalação do mesmo, das seguintes formas:12345# via cURLcurl -sS https://getcomposer.org/installer | php# via PHPphp -r \"readfile('https://getcomposer.org/installer');\" | phpA instalação do Laravel, é simples com o comando:1composer global require \"laravel/installer\"Após a instalação, será necessário adicionar o caminho do mesmo no Path do sistema. Pode fazê-lo, pela interface do sistema operacional ou pelo comando:1export PATH=\"$PATH:$HOME/.composer/vendor/bin\"Primeiro projetoPara criar um novo projeto, usamos o comando:12# new [nome do projeto]laravel new ExampleConfiguraçãoVou me basear na versão atual (5.2). Todos os arquivos de configuração se encontram na pasta config. Os valores de configuração podem ser acessados facilmente com a função global config. Os valores podem ser acessados, usando o nome do arquivo e a opção desejada por intermédio do caractere .. Exemplo:1$value = config('app.timezone');Para definir um valor em tempo de execução, passamos um array, na função config:1config(['app.timezone' =&gt; 'America/Sao_Paulo']);AmbienteÉ sempre bom separar o ambiente de desenvolvimento e o ambiente de produção. O Laravel tora isso fácil, utilizando a biblioteca DotEnv, criada por Vance Lucas.Durante a instalação do Laravel, via Composer, o arquivo .env.example é copiado para .env:1php -r \"copy('.env.example', '.env');\"Nesse novo arquivo, teremos todas as varáveis que serão carregadas no $_ENV. Podemos utilizar a função env, para recuperar os valores dessas variáveis. Exemplo:12345// o segundo parâmetro é um valor default// que é usado quando não existe // nenhuma variável de ambiente// para a chave informada'debug' =&gt; env('APP_DEBUG', false)O ambiente atual da aplicação é determinado através da variável APP_ENV, no arquivo .env. Podemos acessar esse valor com o método environment, da interface estática(facade) da classe App:1$environment = App::environment();Também podemos passar argumentos para o environment, para verificação.1234567if (App::environment('local')) &#123; // The environment is local&#125;if (App::environment('local', 'staging')) &#123; // The environment is either local OR staging...&#125;Podemos também acessar pelo método auxiliar app:1$environment = app()-&gt;environment();Cache da configuraçãoPara aumentar a velocidade da sua aplicação, podemos armazenar em cache os arquivos de configuração em apenas um arquivo. Isso é possível, usando o config:cache, do Artisan. Não se deve ser executado no ambiente de desenvolvimento, por ser frequentemente alterado. Então, para a implantação de produção, execute:1php artisan config:cacheObservaçõesNa instalação via Composer, além da execução do comando para a criação do arquivo .env, também executado outros comandos. Um deles é o comando:1php artisan key:generateO mesmo cria uma chave no arquivo de ambiente, sendo o valor da varável APP_KEY. Se a chave da aplicação não estiver definida, as suas sessões de usuário e outros dados criptografados não serão seguros.Estrutura de pastasapp/ - Componentes da sua aplicação.bootstrap/ - Arquivos que inicializam o framework e configuram o autoloading.config/ - Arquivos de configuração do projeto.database/ - Contém os arquivos de migration e seeds do seu banco de dados, nas pastas factories, migrations e seed.public/ - É o seu DocumentRoot (toda requisição efetuada pelo usuário cairá nela).node_modules/ - Será criada na execução do comando npm install, na raiz do projeto.resources/ - Contém as suas views, raw assets (LESS, SASS, CoffeeScript), e arquivos de localização.storage/ - É responsável por armazenar os arquivos de uso interno do Laravel tais como: Cache, logs e etc.tests/ - Contém os arquivos de testes, para a aplicação.vendor/ - Gerada automaticamente pelo composer, é nela que encontramos as bibliotecas que farão com que o Laravel rode. – .env – .env.example – .gitattributes – .gitignore – artisan – composer.json – composer.lock – gulpfile – package.json – phpunit.xml – readme.md – server.phpConclusãoEssa é uma breve introdução ao Laravel, onde podemos fazer a instalação e criar um novo projeto. Nos próximos artigos, veremos coisas mais práticas e conheceremos mais sobre suas funcionalidades e etc.","pubDate":"Sat, 06 Feb 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/php/comecando-com-laravel/","category":"php"},{"title":"Começando com PowerShell","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/shell-ms-dos/comecando-com-powershell/","description":"PowerShell é um prompt de comando do sistema operacional Windows. É construído em cima do framework .NET e totalmente orientado a objetos. É fortemente integrado com uma grande quantidade de componentes do Windows.InstalaçãoA partir do Windows Server 2008 R2 e do Windows 7, o mesmo já vem instalado. Para as versões anteriores, pode ser baixada gratuitamente para instalação.Cmdlet (command let)A base do PowerShell são os cmdlets. A Microsoft fez várias estratégias de design na concepção de cmdlets no PowerShell. Primeiro é a capacidade de inferir facilmente nomes de cmdlet, ou pelo menos torná-los fáceis de se descobrir.Os cmdlets usam o formato verbo-substantivo como em Get-Service, Stop-Service, ou Import-CSV. O verbo do nome do cmdlet indica a ação a ser executada com o substantivo. Normalmente cmdlets são usados ​​para solicitar informações usando o verbo Get, como é o caso com Get-Process ou Get-Content. Em muitos casos, essas combinações de verbo-substantivo pode ser adivinhado ou previsto por causa da convenção de nomenclatura padrão.Alguns comandos básicos:Get-Location: obter o diretório atualSet-Location: alterar o diretório atualCopy-Item: copiar arquivosRemove-Item: remover um arquivo ou diretórioMove-Item: mover um arquivoRename-Item: renomear um arquivoNew-Item: criar um novo arquivo vazio ou diretórioSintaxeAbaixo temos a sintaxe básica para começar a brincar com o PowerShell. :)Vírgula e ponto e vírgulaA vírgula é frequentemente usada para separar itens em uma lista. Considerando que o ponto e vírgula é usado para dividir ideias separadas.123456$i=0$Log = Get-EventLog -ListForEach ($Item in $Log) &#123; \"&#123;0,-30&#125; &#123;1,-20&#125; &#123;2,13&#125;\" -f ` $Item.Log, $Item.OverflowAction, $Item.MaximumKilobytes; $i++&#125;EscapeA crase representado como o caractere ` é o caractere de escape no PowerShell. Você pode usar esse caractere para guias exemplo de impressão `t ou escapar caracteres com um significado especial como o caractere $ como em `$ ou escapar citações como `&quot;.Você também pode usar o caractere de crase para abranger as suas declarações em várias linhas, que às vezes pode vir a calhar.VariáveisA declaração de variáveis no PowerShell é semelhante ao do PHP, com o prefixo $.12$example = 'teste'$age = 29Aspas duplas e simplesEnquanto as asplas duplas interpretam o que está dentro, as aspas simples não interpretam e representam tudo de forma literal.12345$example = 'ando'write 'test$example'# test$examplewrite 'test$example'# testandoOperadores de comparaçãoIgual: -eqDiferente: -neMaior do que: -gtMenor do que: -ltMaior igual a: -geMenor igual a: -leComparar com wilcards: -like ou -notlikeComparar string com regex: -match ou -notmatchSe um array contém um valor(pode ser string): -containsOperadores lógicose: -andou: -orou exclusivo: -xornegação: ! ou -norExecutando os scriptsPor padrão, por uma questão de segurança, a possibilidade de execução de scripts Power Shell vem desabilitada. Para habilitar essa característica precisamos mudar a política de execuçãoNo terminal do PowerShell, execute:12Get-ExecutionPolicy// O retorno deverá ser RestrictedPara permitir a execução de scripts sem qualquer restrição, utilizaremos a regra Unrestricted, que permite executar todo e qualquer script PowerShell.1Set-ExecutionPolicy UnrestrictedSerá exibida uma mensagem informando sobre a proteção quanto à execução de Scripts. Digite “S” e pressione Enter.Agora com o commando Get-ExecutionPolicy, veremos que o retorno será Unrestricted. Assim, os scripts PowerShell já podem ser executados de forma irrestrita.Existem outras regras além de Unrestricted e Restricted:AllSigned – Todos os scripts devem ser assinados por alguém confiável.Remote Signed – Todos os scripts que forem baixados da Internet devem ser assinados por alguém confiável.Bypass - A responsabilidade da segurança fica totalmente a cargo do utilizador.ConclusãoEsse foi apenas umas simples introdução. A maioria dos assuntos merecem um artigo para cada tópico, entao estaremos vendo mais sobre o asunto nos próximos artigos. Sempre é bom conhecer uma linguagem que possamos mexer com o sistema operacional.","pubDate":"Tue, 26 Jan 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/shell-ms-dos/comecando-com-powershell/","category":"shell/ms-dos"},{"title":"Começando com MySQL","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/database/comecando-com-mysql/","description":"Meu primeiro contato com banco de dados, foi em 2009, e foi com o MySQL. Um SGBD (Sistema Gerenciador de Banco de Dados) relacional e orientado a objetos, que pelo nome, já dá a pista que utiliza a linguagem SQL (Structured Query Language).Criado na Suécia e em 2008, a MySQL AB, desenvolvedora do MySQL, foi adquirida pela Sun Microsystems por US$ 1 bilhão. No dia 20 de Abril de 2009, foi anunciado que a Oracle compraria a Sun Microsystems e todos os seus produtos, incluindo o MySQL.MySQL é robusto, multiusuário, multitarefa e inicialmente desenvolvido para projetos de pequeno e médio porte. Alguns dos grandes motivos por ser muito utlizado, é por ser open source e a fácil integração com o PHP incluído. Tem compatibilidade com a maioria dos sistemas operacionais, por ter sido desenvolvido em C e C++.Características do MySQLComo já foi citado, compatibilidade com várias plataformas como: Windows, Linux, Unix e outros. Suporte a várias linguagens como PHP, C, C++, Java, Python, Ruby e mais. Um bom sistema de senhas criptografadas flexível e segura. Suporte a ODBC (Open Database Connectivity), padrão que define um conjunto de interfaces que permitem o uso de linguagens de programação como Visual Basic, Delphi, Visual C++, Java, entre outras capazes de utilizar estas interfaces, para ter acesso a uma vasta gama de bases de dados distintas sem a necessidade de codificar métodos de acesso especializados.Algumas outras características:Excelente desempenho e estabilidade;Pouco exigente quanto a recursos de novos hardware;Facilidade no manuseio;Contempla a utilização de vários Storage Engines como MyISAM, InnoDB, Falcon, BDB, Archive, Federated, CSV, Solid…Suporta controle transacional;Suporta Triggers;Suporta Cursors (Non-Scrollable e Non-Updatable);Suporta Stored Procedures e Functions;Replicação facilmente configurável;Interfaces gráficas (MySQL Toolkit) de fácil utilização.InstalaçãoWindows/ OS XPode ser feito via download do instalador no site oficial.LinuxNo Linux, além de poder ser feito o download como no windows/OS X, podemos fazê-lo pelo comando:12345# Debian/Ubuntuapt-get install mysql-server# Fedora/CentOSyum install mysql-serverMySQL ClientO servidor é o responsável por armazenar os dados, responder às requisições, controlar a consistência dos dados, entre outras coisas. Aém disso, precisamos da comunicação com o servidor através da SQL. Para isso, temos algumas ferramentas como: MySQL Workbench, Sequel Pro, HeidiSQL, phpMyAdmin, Toad for MySQL, MySQL-Front, Neor Profile SQL e mais.Para os usuários que preferem a linha de comando. Podemos instalar o mysql-client, no Linux, via linha de comando:12345# Debian/Ubuntuapt-get install mysql-client# Fedora/CentOSyum install mysql-clientQue permite você se conectar a um servidor MySQL. Ele lhe dará a possibilidade de utilizar na linha de comando o mysql.Mesmo gostando muito da linha de comando, o meu preferido e o que mais utilizo é o Workbench.WorkbenchO MySQL Workbench é uma ferramenta gráfica que permite fazer modelagem de dados, desenvolvimento em SQL e administração do servidor MySQL.O download pode ser feito no site oficial. Por linha de comando no linux, pode ser feito com o comando:12345# Debian/Ubuntuapt-get install mysql-workbench# Fedora/CentOSyum install mysql-workbenchConclusãoPara não ficar muito extenso o artigo, veremos a continuação em um próximo artigo. Onde daremos continuidade com a configuração do mesmo.","pubDate":"Sun, 17 Jan 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/database/comecando-com-mysql/","category":"database"},{"title":"Começando com AngularJS","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/angular/comecando-com-angular/","description":"AngularJS é um framework JavaScript open source, que auxilia na execução de Single Page Application(SPA). Desenvolvido pela Google, utiliza o padrão model–view–controller (MVC), facilitando tanto o desenvolvimento quanto os testes das aplicações.No Angular, os dados são ligados em ambos os sentidos, ou seja, quando o model é atualizado, a view será atualizada automaticamente para refletir essas mudanças e vice-versa. Isso faz com que a manipulação do DOM seja fácil e é uma das principais vantagens em se utilizar o Angular.Data bindingA associação de dados é a característica mais útil e poderosa entre qualquer uma das tecnologias de desenvolvimento de software existentes ou futuras. É realmente um processo que preenche uma conexão entre a visão e a lógica de negócios de uma aplicação.Basicamente vemos uma associação de sentido único e em dois sentidos de dados no que diz respeito a aplicações AngularJS.One-way Data BindingÉ uma abordagem em que um valor é retirado do modelo de dados e inserido em um elemento HTML. Não havendo uma maneira de atualizar o model pela view.AngularJS fornece algumas diretivas de associação dados:ng-bind - Passa a propriedade de texto interno de um elemento HTML.ng-bind-template - Quase semelhante a diretiva ng-bind, mas permite múltiplos templates.ng-non-bindable - Declara uma região de conteúdo para o qual a associação de dados será ignorada.ng-bind-html - Cria associações de dados usando a propriedade interna HTML de um elemento HTML.ng-model - Cria a associação bidirecional de dados.Two-Way Data BindingÉ quando há mudança no model e a view reflete a mudança, e vice-versa. Associações de duas vias em AngularJS são criadas com a diretiva ng-model. Praticamente, as associações de duas vias pode ser aplicadas apenas aos elementos que permitem que o usuário forneça um valor de dados, seriam input, textarea, e elementos select.Iniciando com o AngularPara inicializar qualquer aplicação Angular, precisamos invocar a diretiva ng-app. Essa diretiva pode ser associada a qualquer elemento HTML e é usado para auto-inicialização de uma aplicação Angular. A diretiva ng-app representa a raiz da aplicação e apenas podemos ter uma inicialização de uma aplicação Angular, por página.O controller é definido utilizando a diretiva ng-controller. O controller é um objeto javascript que contém atributos/propriedades e funções. Cada controller aceita o $scope como um parâmetro que se refere a aplicação/módulo que o controller, irá controlar.Você pode fazer o download do framework, pelo próprio site ou pelo:Bower1bower install angularNPM1npm install angularE por outros meios.Exemplo simples, para o primeiro Olá, mundo, com AngularJS.index.html123456789101112&lt;html ng-app=\"app\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;AngularJS&lt;/title&gt; &lt;/head&gt; &lt;body ng-controller=\"ExampleController\"&gt; &lt;p&gt;Olá, &lt;em&gt;&#123;&#123; name &#125;&#125;&lt;/em&gt;!&lt;/p&gt; &lt;script src=\"lib/angular/angular.min.js\"&gt;&lt;/script&gt; &lt;script src=\"app.js\"&gt;&lt;/script&gt; &lt;script src=\"example-controller.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;app.js123456(function() &#123; 'use strict'; var app = angular.module('app', []);&#125;)();example-controller.js1234567891011121314(function() &#123; 'use strict'; angular .module('app') .controller('ExampleController', ExampleController); ExampleController.$inject = ['$scope']; function ExampleController($scope) &#123; var vm = this; $scope.name = 'Hemerson'; &#125;&#125;)();ConclusãoAngular, veio como a solução para abstrair a manipulação do DOM da lógica da aplicação. Abstrai o acoplamento entre o lado cliente e o lado servidor da aplicação. Isto permite que o desenvolvimento evolua em ambos os lados, de forma paralela, e permite o reuso de código. E tem muitos recursos e vantagens que veremos nos próximos artigos sobre o assunto.","pubDate":"Sun, 10 Jan 2016 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/angular/comecando-com-angular/","category":"angular"},{"title":"Começando com Domain Driven Design","link":"https://nerdcalistenico.github.io/hemersonvianna/artigos/IT-management/comecando-com-ddd/","description":"Domain Driven Design é uma filosofia de desenvolvimento lançada por Erick Evans. O DDD é composto por um conjunto de padrões para a construção de aplicações corporativas a partir do modelo de domínio.Com DDD, estamos de olho nos modelos de um domínio com problema. A persistência, interfaces de usuário e outras coisas de mensagens pode vir mais tarde, é o domínio que precisa ser entendido, porque essa é a parte do sistema que está sendo construído que distingue negócios da sua empresa de seus concorrentes.Quando digo modelo não se refere a um diagrama ou conjunto de diagramas. Os diagramas são úteis, mas eles não são o modelo, apenas diferentes visões do modelo. O modelo é o conjunto de conceitos selecionados para serem implementados em um software, representado no código e qualquer outro artefato de software utilizado para construir o sistema entregue. Em outras palavras, o código é o modelo. Editores de texto fornecem uma maneira de trabalhar com este modelo, embora modernas ferramentas forneçam a abundância de outras visualizações também (diagramas de classe UML e etc).O DDD define quatro camadas principais, sendo elas:User Interface: Responsável por apresentar informações ao usuário e interpretar os comandos do usuário.Application: Esta camada coordena a atividade das aplicações. Ele não contém qualquer lógica de negócios. Não guarda o estado de objetos de negócios, mas ele pode armazenar o estado de um progresso das tarefas do aplicativo.Domain: Esta camada contém informações sobre o domínio do negócio. O estado de objetos de negócios é realizado aqui. Persistência dos objetos de negócios e, possivelmente, seu estado é delegado à camada de infra-estrutura.Infrastructure: Esta camada atua como uma biblioteca de suporte em todas as outras camadas. Fornece a comunicação entre as camadas, implementa persistência para objetos de negócios, contém bibliotecas de suporte para a camada de interface do usuário e etc.ConclusãoO DDD não é a solução para todos os problemas de todas as camadas de um sistema. Seu foco é na modelagem das entidades principais de negócio usando a linguagem adequada daquele domínio para facilitar a manutenção, extensão e entendimento.","pubDate":"Sun, 27 Dec 2015 18:20:00 GMT","guid":"https://nerdcalistenico.github.io/hemersonvianna/artigos/IT-management/comecando-com-ddd/","category":"IT management"}]}